//DQB2 snow storm screen effect.
// ---- Created with 3Dmigoto v0.6.163 on Mon Jul 15 18:03:52 2024

cbuffer _Globals : register(b0)
{
  float4 litDir : packoffset(c13);
  float4 litCol : packoffset(c14);
  float4 ambLit : packoffset(c15);
  float4 vEye : packoffset(c19);
  row_major float4x4 mW2P : packoffset(c0);
  float4 fog : packoffset(c4);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float4 v2 : COLOR0,
  float2 v3 : TEXCOORD0,
  float4 v4 : BLENDWEIGHT0,
  float4 v5 : BLENDINDICES0,
  float4 v6 : BINORMAL0,
  int4 v7 : COLOR1,
  int4 v8 : TEXCOORD3,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  
  r0.y = dot(v0.xyzw, v5.xyzw);
  r1.xyzw = mW2P._m10_m11_m12_m13 * r0.yyyy;
  r0.x = dot(v0.xyzw, v4.xyzw);
  r1.xyzw = r0.xxxx * mW2P._m00_m01_m02_m03 + r1.xyzw;
  r0.z = dot(v0.xyzw, v6.xyzw);
  r1.xyzw = r0.zzzz * mW2P._m20_m21_m22_m23 + r1.xyzw;
  r1.xyzw = v0.wwww * mW2P._m30_m31_m32_m33 + r1.xyzw;
  o0.xyzw = r1.xyzw;
  
  if (o0.w>=0.2999 && o0.w<0.3001) {
	o0.x-=stereo.x*(o0.w-stereo.y);
  }
  
  o3.z = r1.w * fog.x + fog.y;
  o1.xyz = r0.xyz;
  r0.xyz = vEye.xyz + -r0.xyz;
  o1.w = v0.w;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = v6.yzx * v5.zxy;
  r1.xyz = v5.yzx * v6.zxy + -r1.xyz;
  r1.x = dot(v1.xyz, r1.xyz);
  r2.xyz = v6.zxy * v4.yzx;
  r2.xyz = v6.yzx * v4.zxy + -r2.xyz;
  r1.y = dot(v1.xyz, r2.xyz);
  r2.xyz = v5.yzx * v4.zxy;
  r2.xyz = v4.yzx * v5.zxy + -r2.xyz;
  r1.z = dot(v1.xyz, r2.xyz);
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.x = dot(r1.xyz, r0.xyz);
  r0.y = saturate(dot(r1.xyz, -litDir.xyz));
  r0.yzw = litCol.xyz * r0.yyy;
  r1.xyzw = (int4)v7.xyzw;
  r2.xy = cmp(r1.xw < float2(0,0));
  r2.xy = r2.xy ? float2(256,256) : 0;
  r2.xy = r1.xw * float2(0.00390625,0.00390625) + r2.xy;
  r1.xyzw = float4(0.00390625,0.00390625,0.00390625,0.00390625) * r1.xyzw;
  r1.xyzw = frac(r1.xyzw);
  r2.xy = r2.xy + -r1.xw;
  r1.xyzw = v2.xyzw * r1.xyzw;
  r1.xyzw = float4(1.00392163,1.00392163,1.00392163,1.00392163) * r1.xyzw;
  r2.y = cmp(0.5 < r2.y);
  r0.x = r2.y ? abs(r0.x) : 1;
  o2.w = r1.w * r0.x;
  r0.xyz = r1.xyz * r0.yzw;
  o2.xyz = ambLit.xyz * r1.xyz + r0.xyz;
  r0.x = cmp(r2.x >= 128);
  r0.y = -128 + r2.x;
  r0.x = r0.x ? r0.y : r2.x;
  r0.x = -16 + r0.x;
  o3.w = exp2(r0.x);
  r0.xyzw = (int4)v8.xyzw;
  r1.x = 0.000244140625;
  r1.zw = v3.xy;
  r0.xyzw = r1.xxzw * r0.xyzw;
  o3.xy = r0.zw * float2(0.000244140625,0.000244140625) + r0.xy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v0.6.163 on Mon Jul 15 18:03:52 2024
//
//
// Buffer Definitions:
//
// cbuffer $Globals
// {
//
//   float4 litDir;                     // Offset:  208 Size:    16
//   float4 litCol;                     // Offset:  224 Size:    16
//   float4 ambLit;                     // Offset:  240 Size:    16
//   float4 vEye;                       // Offset:  304 Size:    16
//   row_major float4x4 mW2P;           // Offset:    0 Size:    64
//   float4 fog;                        // Offset:   64 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
// BLENDINDICES             0   xyzw        5     NONE   float   xyzw
// BINORMAL                 0   xyzw        6     NONE   float   xyzw
// COLOR                    1   xyzw        7     NONE     int   xyzw
// TEXCOORD                 3   xyzw        8     NONE     int   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[20], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xy
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_input v7.xyzw
dcl_input v8.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 3
dp4 r0.y, v0.xyzw, v5.xyzw
mul r1.xyzw, r0.yyyy, cb0[1].xyzw
dp4 r0.x, v0.xyzw, v4.xyzw
mad r1.xyzw, r0.xxxx, cb0[0].xyzw, r1.xyzw
dp4 r0.z, v0.xyzw, v6.xyzw
mad r1.xyzw, r0.zzzz, cb0[2].xyzw, r1.xyzw
mad r1.xyzw, v0.wwww, cb0[3].xyzw, r1.xyzw
mov o0.xyzw, r1.xyzw
mad o3.z, r1.w, cb0[4].x, cb0[4].y
mov o1.xyz, r0.xyzx
add r0.xyz, -r0.xyzx, cb0[19].xyzx
mov o1.w, v0.w
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, v5.zxyz, v6.yzxy
mad r1.xyz, v5.yzxy, v6.zxyz, -r1.xyzx
dp3 r1.x, v1.xyzx, r1.xyzx
mul r2.xyz, v4.yzxy, v6.zxyz
mad r2.xyz, v6.yzxy, v4.zxyz, -r2.xyzx
dp3 r1.y, v1.xyzx, r2.xyzx
mul r2.xyz, v4.zxyz, v5.yzxy
mad r2.xyz, v4.yzxy, v5.zxyz, -r2.xyzx
dp3 r1.z, v1.xyzx, r2.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.x, r1.xyzx, r0.xyzx
dp3_sat r0.y, r1.xyzx, -cb0[13].xyzx
mul r0.yzw, r0.yyyy, cb0[14].xxyz
itof r1.xyzw, v7.xyzw
lt r2.xy, r1.xwxx, l(0.000000, 0.000000, 0.000000, 0.000000)
and r2.xy, r2.xyxx, l(0x43800000, 0x43800000, 0, 0)
mad r2.xy, r1.xwxx, l(0.00390625000, 0.00390625000, 0.000000, 0.000000), r2.xyxx
mul r1.xyzw, r1.xyzw, l(0.00390625000, 0.00390625000, 0.00390625000, 0.00390625000)
frc r1.xyzw, r1.xyzw
add r2.xy, -r1.xwxx, r2.xyxx
mul r1.xyzw, r1.xyzw, v2.xyzw
mul r1.xyzw, r1.xyzw, l(1.00392163, 1.00392163, 1.00392163, 1.00392163)
lt r2.y, l(0.500000), r2.y
movc r0.x, r2.y, |r0.x|, l(1.000000)
mul o2.w, r0.x, r1.w
mul r0.xyz, r0.yzwy, r1.xyzx
mad o2.xyz, cb0[15].xyzx, r1.xyzx, r0.xyzx
ge r0.x, r2.x, l(128.000000)
add r0.y, r2.x, l(-128.000000)
movc r0.x, r0.x, r0.y, r2.x
add r0.x, r0.x, l(-16.000000)
exp o3.w, r0.x
itof r0.xyzw, v8.xyzw
mov r1.x, l(0.000244140625)
mov r1.zw, v3.xxxy
mul r0.xyzw, r0.xyzw, r1.xxzw
mad o3.xy, r0.zwzz, l(0.000244140625, 0.000244140625, 0.000000, 0.000000), r0.xyxx
ret
// Approximately 55 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
