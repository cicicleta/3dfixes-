//HUD PS 2. Text. Clipping the text makes the name of the character speaking disappear.
// ---- Created with 3Dmigoto v0.6.163 on Mon Jun  3 00:05:15 2024

cbuffer _Globals : register(b0)
{
  float4 glowColor : packoffset(c0) = {0,0,0,1};
  float2 glowValues : packoffset(c1) = {0.0500000007,0.519999981};
}

SamplerState LinearClampSampler_s : register(s0);
Texture2D<float4> texSDF : register(t0);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_Position0,
  float4 v1 : COLOR0,
  float2 v2 : TEXCOORD0,
  float v3 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

// This matches the stereo correction in the vertex shader
float stereo_adjustment = v3;

// Load the scissor rectangle and stereoise it. Note that since both
// SV_Position and the scissor rectange are in pixels, the adjustment needs to
// be divided by the render target size and again by 2:
float4 scissor_rect = IniParams[4].xyzw;
//if (IniParams[11].x==1) {
scissor_rect.xz += floor(stereo_adjustment * IniParams[5].x / 2);
//}

// Perform stereo adjusted scissor clipping:
if (v0.w==1 && (any(v0.xy < scissor_rect.xy) || any(v0.xy >= scissor_rect.zw))) {
        //o0.xyzw=0;
        //return;
}

  r0.x = glowValues.y + -glowValues.x;
  r0.x = 1 / r0.x;
  r0.y = texSDF.Sample(LinearClampSampler_s, v2.xy).w;
  r0.z = -glowValues.x + r0.y;
  r0.y = saturate(-0.449999988 + r0.y);
  r0.y = 10.5263157 * r0.y;
  r0.y = min(1, r0.y);
  r0.x = saturate(r0.z * r0.x);
  r0.z = r0.x * -2 + 3;
  r0.x = r0.x * r0.x;
  r0.x = r0.z * r0.x;
  o0.w = v1.w * r0.x;
  r0.xzw = -glowColor.xyz + v1.xyz;
  o0.xyz = r0.yyy * r0.xzw + glowColor.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v0.6.163 on Mon Jun  3 00:05:15 2024
//
//
// Buffer Definitions:
//
// cbuffer $Globals
// {
//
//   float4 glowColor;                  // Offset:    0 Size:    16
//      = 0x00000000 0x00000000 0x00000000 0x3f800000
//   float2 glowValues;                 // Offset:   16 Size:     8
//      = 0x3d4ccccd 0x3f051eb8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// LinearClampSampler                sampler      NA          NA    0        1
// texSDF                            texture  float4          2d    0        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 1
add r0.x, -cb0[1].x, cb0[1].y
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
sample_indexable(texture2d)(float,float,float,float) r0.y, v2.xyxx, t0.xwyz, s0
add r0.z, r0.y, -cb0[1].x
add_sat r0.y, r0.y, l(-0.450000)
mul r0.y, r0.y, l(10.526316)
min r0.y, r0.y, l(1.000000)
mul_sat r0.x, r0.x, r0.z
mad r0.z, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.z
mul o0.w, r0.x, v1.w
add r0.xzw, v1.xxyz, -cb0[0].xxyz
mad o0.xyz, r0.yyyy, r0.xzwx, cb0[0].xyzx
ret
// Approximately 15 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
