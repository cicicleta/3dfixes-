//Light shafts PS 1.
// ---- Created with 3Dmigoto v0.6.163 on Sat May 18 12:31:08 2024

cbuffer _Globals : register(b0)
{
  float3 vLightViewPos : packoffset(c0) = {0,0,0};
  float4 vRecipScreenSize : packoffset(c1) = {0.00052083336,0.00092592591,0.00026041668,0.000462962955};
  float4 vLightShaftBlurWeights[4] : packoffset(c2);
  int isLightShaftEnable : packoffset(c6) = {1};
  float4 vLightShaftPower : packoffset(c7) = {0.200000003,0.119999997,0.119999997,37};
}

SamplerState smplLightShaftWork1_s : register(s0);
Texture2D<float4> smplLightShaftWork1_Tex : register(t0);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  
  r0.x = cmp(0 < isLightShaftEnable);
  r0.yz = vLightViewPos.xy * float2(0.5,-0.5) + float2(0.5,0.5);
  r0.w = vLightShaftPower.w * vRecipScreenSize.y;
  r0.w = 4 * r0.w;
  r0.yz = -v1.xy + r0.yz;
  
  r0.y+=stereo.x*0.5;
  
  r0.yz = r0.yz * r0.ww;
  r1.xyzw = float4(0,0,0,0);
  r0.w = 0;
  while (true) {
    r2.x = cmp((int)r0.w >= 4);
    if (r2.x != 0) break;
    r2.x = (uint)r0.w << 2;
    r2.x = (int)r2.x;
    r2.yz = r0.yz * r2.xx + v1.xy;
    r3.xyzw = smplLightShaftWork1_Tex.Sample(smplLightShaftWork1_s, r2.yz).xyzw;
    r3.xyzw = vLightShaftBlurWeights[r0.w].xxxx * r3.xyzw + r1.xyzw;
    r2.xyz = float3(1,2,3) + r2.xxx;
    r4.xyzw = r0.yzyz * r2.xxyy + v1.xyxy;
    r5.xyzw = smplLightShaftWork1_Tex.Sample(smplLightShaftWork1_s, r4.xy).xyzw;
    r3.xyzw = vLightShaftBlurWeights[r0.w].yyyy * r5.xyzw + r3.xyzw;
    r4.xyzw = smplLightShaftWork1_Tex.Sample(smplLightShaftWork1_s, r4.zw).xyzw;
    r3.xyzw = vLightShaftBlurWeights[r0.w].zzzz * r4.xyzw + r3.xyzw;
    r2.xy = r0.yz * r2.zz + v1.xy;
    r2.xyzw = smplLightShaftWork1_Tex.Sample(smplLightShaftWork1_s, r2.xy).xyzw;
    r1.xyzw = vLightShaftBlurWeights[r0.w].wwww * r2.xyzw + r3.xyzw;
    r0.w = (int)r0.w + 1;
  }
  o0.xyzw = r0.xxxx ? r1.xyzw : float4(1,1,1,1);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v0.6.163 on Sat May 18 12:31:08 2024
//
//
// Buffer Definitions:
//
// cbuffer $Globals
// {
//
//   float3 vLightViewPos;              // Offset:    0 Size:    12
//      = 0x00000000 0x00000000 0x00000000
//   float4 vRecipScreenSize;           // Offset:   16 Size:    16
//      = 0x3a088889 0x3a72b9d6 0x39888889 0x39f2b9d6
//   float4 vLightShaftBlurWeights[4];  // Offset:   32 Size:    64
//   int isLightShaftEnable;            // Offset:   96 Size:     4
//      = 0x00000001
//   float4 vLightShaftPower;           // Offset:  112 Size:    16
//      = 0x3e4ccccd 0x3df5c28f 0x3df5c28f 0x42140000
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// smplLightShaftWork1               sampler      NA          NA    0        1
// smplLightShaftWork1_Tex           texture  float4          2d    0        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[8], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
ilt r0.x, l(0), cb0[6].x
mad r0.yz, cb0[0].xxyx, l(0.000000, 0.500000, -0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
mul r0.w, cb0[1].y, cb0[7].w
mul r0.w, r0.w, l(4.000000)
add r0.yz, r0.yyzy, -v1.xxyx
mul r0.yz, r0.wwww, r0.yyzy
mov r1.xyzw, l(0,0,0,0)
mov r0.w, l(0)
loop
  ige r2.x, r0.w, l(4)
  breakc_nz r2.x
  ishl r2.x, r0.w, l(2)
  itof r2.x, r2.x
  mad r2.yz, r0.yyzy, r2.xxxx, v1.xxyx
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.yzyy, t0.xyzw, s0
  mad r3.xyzw, cb0[r0.w + 2].xxxx, r3.xyzw, r1.xyzw
  add r2.xyz, r2.xxxx, l(1.000000, 2.000000, 3.000000, 0.000000)
  mad r4.xyzw, r0.yzyz, r2.xxyy, v1.xyxy
  sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r4.xyxx, t0.xyzw, s0
  mad r3.xyzw, cb0[r0.w + 2].yyyy, r5.xyzw, r3.xyzw
  sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r4.zwzz, t0.xyzw, s0
  mad r3.xyzw, cb0[r0.w + 2].zzzz, r4.xyzw, r3.xyzw
  mad r2.xy, r0.yzyy, r2.zzzz, v1.xyxx
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.xyxx, t0.xyzw, s0
  mad r1.xyzw, cb0[r0.w + 2].wwww, r2.xyzw, r3.xyzw
  iadd r0.w, r0.w, l(1)
endloop
movc o0.xyzw, r0.xxxx, r1.xyzw, l(1.000000,1.000000,1.000000,1.000000)
ret
// Approximately 29 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
