//To monoize. More shadows.
// ---- Created with 3Dmigoto v1.3.16 on Wed Jun 16 23:50:13 2021
//
//cbuffer CB0 : register(b0)
//{
//
//  struct
//  {
//    float4x4 m_uMatrix[3];
//    float4 m_uColor[3];
//  } vtxShdBasicMatrix : packoffset(c0);
//
//}
//
//
//
//// 3Dmigoto declarations
//#define cmp -
//Texture1D<float4> IniParams : register(t120);
//Texture2D<float4> StereoParams : register(t125);
//
//
//void main(
//  float4 v0 : POSITION0,
//  float4 v1 : NORMAL0,
//  float4 v2 : COLOR0,
//  float4 v3 : COLOR1,
//  float2 v4 : TEXCOORD0,
//  float4 v5 : BLENDWEIGHT0,
//  uint4 v6 : BLENDINDICES0,
//  float4 v7 : TEXCOORD1,
//  float4 v8 : TEXCOORD2,
//  float4 v9 : TEXCOORD3,
//  float4 v10 : TEXCOORD4,
//  out float3 o0 : TEXCOORD0,
//  out float4 o1 : COLOR0,
//  out float4 o2 : SV_Position0)
//{
//  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
//  uint4 bitmask, uiDest;
//  float4 fDest;
//
//  r0.x = cmp(v10.y == 1.000000);
//  if (r0.x != 0) {
//    r0.x = dot(v7.xyzw, vtxShdBasicMatrix.m_uMatrix[0]._m00_m10_m20_m30);
//    r1.x = dot(v7.xyzw, vtxShdBasicMatrix.m_uMatrix[0]._m01_m11_m21_m31);
//    r2.x = dot(v7.xyzw, vtxShdBasicMatrix.m_uMatrix[0]._m02_m12_m22_m32);
//    r3.w = dot(v7.xyzw, vtxShdBasicMatrix.m_uMatrix[0]._m03_m13_m23_m33);
//    r0.y = dot(v8.xyzw, vtxShdBasicMatrix.m_uMatrix[0]._m00_m10_m20_m30);
//    r1.y = dot(v8.xyzw, vtxShdBasicMatrix.m_uMatrix[0]._m01_m11_m21_m31);
//    r2.y = dot(v8.xyzw, vtxShdBasicMatrix.m_uMatrix[0]._m02_m12_m22_m32);
//    r4.w = dot(v8.xyzw, vtxShdBasicMatrix.m_uMatrix[0]._m03_m13_m23_m33);
//    r0.z = dot(v9.xyzw, vtxShdBasicMatrix.m_uMatrix[0]._m00_m10_m20_m30);
//    r1.z = dot(v9.xyzw, vtxShdBasicMatrix.m_uMatrix[0]._m01_m11_m21_m31);
//    r2.z = dot(v9.xyzw, vtxShdBasicMatrix.m_uMatrix[0]._m02_m12_m22_m32);
//    r2.w = dot(v9.xyzw, vtxShdBasicMatrix.m_uMatrix[0]._m03_m13_m23_m33);
//    if (vtxShdBasicMatrix.m_uColor[2].x != 0) {
//      r5.xyzw = (int4)vtxShdBasicMatrix.m_uColor[2].xxxx & int4(4,8,2,16);
//      r0.w = dot(r0.xyz, r0.xyz);
//      r0.w = sqrt(r0.w);
//      r1.w = dot(r1.xyz, r1.xyz);
//      r1.w = sqrt(r1.w);
//      r6.x = dot(r2.xyz, r2.xyz);
//      r6.x = sqrt(r6.x);
//      r0.w = r5.x ? r0.w : 1;
//      r1.w = r5.x ? r1.w : 1;
//      r5.x = r5.x ? r6.x : 1;
//      r6.x = min(abs(r0.x), abs(r0.z));
//      r6.y = max(abs(r0.x), abs(r0.z));
//      r6.y = 1 / r6.y;
//      r6.x = r6.x * r6.y;
//      r6.y = r6.x * r6.x;
//      r6.z = r6.y * 0.0208350997 + -0.0851330012;
//      r6.z = r6.y * r6.z + 0.180141002;
//      r6.z = r6.y * r6.z + -0.330299497;
//      r6.y = r6.y * r6.z + 0.999866009;
//      r6.z = r6.x * r6.y;
//      r6.w = cmp(abs(r0.z) < abs(r0.x));
//      r6.z = r6.z * -2 + 1.57079637;
//      r6.z = r6.w ? r6.z : 0;
//      r6.x = r6.x * r6.y + r6.z;
//      r6.y = cmp(r0.z < -r0.z);
//      r6.y = r6.y ? -3.141593 : 0;
//      r6.x = r6.x + r6.y;
//      r6.y = min(r0.x, r0.z);
//      r6.z = max(r0.x, r0.z);
//      r6.y = cmp(r6.y < -r6.y);
//      r6.z = cmp(r6.z >= -r6.z);
//      r6.y = r6.z ? r6.y : 0;
//      r6.x = r6.y ? -r6.x : r6.x;
//      r6.x = 1.57079601 + -r6.x;
//      sincos(-r6.x, r6.x, r7.x);
//      r8.x = -r7.x;
//      r8.y = r6.x;
//      r8.z = r7.x;
//      r6.xyzw = r5.yyyy ? r8.yxzy : float4(1,0,0,1);
//      r7.xz = r6.xz * r0.ww;
//      r7.yw = r6.yw * r1.ww;
//      r0.w = min(abs(vtxShdBasicMatrix.m_uMatrix[1]._m21), abs(vtxShdBasicMatrix.m_uMatrix[1]._m20));
//      r1.w = max(abs(vtxShdBasicMatrix.m_uMatrix[1]._m21), abs(vtxShdBasicMatrix.m_uMatrix[1]._m20));
//      r1.w = 1 / r1.w;
//      r0.w = r1.w * r0.w;
//      r1.w = r0.w * r0.w;
//      r5.y = r1.w * 0.0208350997 + -0.0851330012;
//      r5.y = r1.w * r5.y + 0.180141002;
//      r5.y = r1.w * r5.y + -0.330299497;
//      r1.w = r1.w * r5.y + 0.999866009;
//      r5.y = r1.w * r0.w;
//      r6.x = cmp(abs(vtxShdBasicMatrix.m_uMatrix[1]._m21) < abs(vtxShdBasicMatrix.m_uMatrix[1]._m20));
//      r5.y = r5.y * -2 + 1.57079637;
//      r5.y = r6.x ? r5.y : 0;
//      r0.w = r0.w * r1.w + r5.y;
//      r1.w = cmp(vtxShdBasicMatrix.m_uMatrix[1]._m21 < -vtxShdBasicMatrix.m_uMatrix[1]._m21);
//      r1.w = r1.w ? -3.141593 : 0;
//      r0.w = r1.w + r0.w;
//      r1.w = min(vtxShdBasicMatrix.m_uMatrix[1]._m21, vtxShdBasicMatrix.m_uMatrix[1]._m20);
//      r5.y = max(vtxShdBasicMatrix.m_uMatrix[1]._m21, vtxShdBasicMatrix.m_uMatrix[1]._m20);
//      r1.w = cmp(r1.w < -r1.w);
//      r5.y = cmp(r5.y >= -r5.y);
//      r1.w = r1.w ? r5.y : 0;
//      r0.w = r1.w ? -r0.w : r0.w;
//      r1.w = dot(vtxShdBasicMatrix.m_uMatrix[1]._m00_m10_m20, vtxShdBasicMatrix.m_uMatrix[1]._m00_m10_m20);
//      r1.w = sqrt(r1.w);
//      r5.y = dot(vtxShdBasicMatrix.m_uMatrix[1]._m01_m11_m21, vtxShdBasicMatrix.m_uMatrix[1]._m01_m11_m21);
//      r5.y = sqrt(r5.y);
//      r6.x = dot(vtxShdBasicMatrix.m_uMatrix[1]._m02_m12_m22, vtxShdBasicMatrix.m_uMatrix[1]._m02_m12_m22);
//      r6.z = sqrt(r6.x);
//      sincos(-r0.w, r8.x, r9.x);
//      r10.x = r9.x * r1.w;
//      r11.x = r8.x * r5.y;
//      r10.y = r8.x * -r1.w;
//      r11.y = r9.x * r5.y;
//      r10.z = 0;
//      r8.xyz = r5.zzz ? r10.xyz : vtxShdBasicMatrix.m_uMatrix[1]._m00_m10_m20;
//      r11.z = 0;
//      r9.xyz = r5.zzz ? r11.xyz : vtxShdBasicMatrix.m_uMatrix[1]._m01_m11_m21;
//      r6.xy = float2(0,0);
//      r6.xyz = r5.zzz ? r6.xyz : vtxShdBasicMatrix.m_uMatrix[1]._m02_m12_m22;
//      r10.x = dot(r8.xy, r7.xy);
//      r11.x = dot(r8.xy, r7.zw);
//      r2.x = r8.z * r5.x;
//      r10.y = dot(r9.xy, r7.xy);
//      r11.y = dot(r9.xy, r7.zw);
//      r2.y = r9.z * r5.x;
//      r10.z = dot(r6.xy, r7.xy);
//      r11.z = dot(r6.xy, r7.zw);
//      r2.z = r6.z * r5.x;
//      if (r5.w != 0) {
//        r5.xyz = vtxShdBasicMatrix.m_uMatrix[1]._m01_m21_m11 * r4.www;
//        r5.xyz = vtxShdBasicMatrix.m_uMatrix[1]._m00_m20_m10 * r3.www + r5.xyz;
//        r5.xyz = vtxShdBasicMatrix.m_uMatrix[1]._m02_m22_m12 * r2.www + r5.xyz;
//        r5.xyz = vtxShdBasicMatrix.m_uMatrix[1]._m03_m23_m13 + r5.xyz;
//        r0.w = min(abs(r5.x), abs(r5.y));
//        r1.w = max(abs(r5.x), abs(r5.y));
//        r1.w = 1 / r1.w;
//        r0.w = r1.w * r0.w;
//        r1.w = r0.w * r0.w;
//        r5.w = r1.w * 0.0208350997 + -0.0851330012;
//        r5.w = r1.w * r5.w + 0.180141002;
//        r5.w = r1.w * r5.w + -0.330299497;
//        r1.w = r1.w * r5.w + 0.999866009;
//        r5.w = r1.w * r0.w;
//        r6.x = cmp(abs(r5.y) < abs(r5.x));
//        r5.w = r5.w * -2 + 1.57079637;
//        r5.w = r6.x ? r5.w : 0;
//        r0.w = r0.w * r1.w + r5.w;
//        r1.w = cmp(r5.y < -r5.y);
//        r1.w = r1.w ? -3.141593 : 0;
//        r0.w = r1.w + r0.w;
//        r1.w = min(r5.x, r5.y);
//        r5.w = max(r5.x, r5.y);
//        r1.w = cmp(r1.w < -r1.w);
//        r5.w = cmp(r5.w >= -r5.w);
//        r1.w = r1.w ? r5.w : 0;
//        r0.w = r1.w ? -r0.w : r0.w;
//        sincos(-r0.w, r6.x, r7.x);
//        r1.w = r7.x * r5.y;
//        r1.w = -r5.x * r6.x + r1.w;
//        r5.x = min(abs(r5.z), abs(r1.w));
//        r5.y = max(abs(r5.z), abs(r1.w));
//        r5.y = 1 / r5.y;
//        r5.x = r5.x * r5.y;
//        r5.y = r5.x * r5.x;
//        r5.w = r5.y * 0.0208350997 + -0.0851330012;
//        r5.w = r5.y * r5.w + 0.180141002;
//        r5.w = r5.y * r5.w + -0.330299497;
//        r5.y = r5.y * r5.w + 0.999866009;
//        r5.w = r5.x * r5.y;
//        r6.x = cmp(abs(r1.w) < abs(r5.z));
//        r5.w = r5.w * -2 + 1.57079637;
//        r5.w = r6.x ? r5.w : 0;
//        r5.x = r5.x * r5.y + r5.w;
//        r5.y = cmp(r1.w < -r1.w);
//        r5.y = r5.y ? -3.141593 : 0;
//        r5.x = r5.x + r5.y;
//        r5.y = min(r5.z, r1.w);
//        r1.w = max(r5.z, r1.w);
//        r5.y = cmp(r5.y < -r5.y);
//        r1.w = cmp(r1.w >= -r1.w);
//        r1.w = r1.w ? r5.y : 0;
//        r1.w = r1.w ? -r5.x : r5.x;
//        r5.x = sin(r1.w);
//        r5.y = sin(-r0.w);
//        r6.xy = cos(r5.xy);
//        r6.z = r5.x * r5.y;
//        r6.w = -r6.x * r5.y;
//        r7.y = r6.y * -r5.x;
//        r7.z = r6.x * r6.y;
//        r8.x = dot(r6.yzw, vtxShdBasicMatrix.m_uMatrix[1]._m00_m10_m20);
//        r9.x = dot(r6.yzw, vtxShdBasicMatrix.m_uMatrix[1]._m01_m11_m21);
//        r12.x = dot(r6.yzw, vtxShdBasicMatrix.m_uMatrix[1]._m02_m12_m22);
//        r5.z = r6.x;
//        r8.y = dot(r5.zx, vtxShdBasicMatrix.m_uMatrix[1]._m10_m20);
//        r9.y = dot(r5.zx, vtxShdBasicMatrix.m_uMatrix[1]._m11_m21);
//        r12.y = dot(r5.zx, vtxShdBasicMatrix.m_uMatrix[1]._m12_m22);
//        r7.x = r5.y;
//        r8.z = dot(r7.xyz, vtxShdBasicMatrix.m_uMatrix[1]._m00_m10_m20);
//        r9.z = dot(r7.xyz, vtxShdBasicMatrix.m_uMatrix[1]._m01_m11_m21);
//        r12.z = dot(r7.xyz, vtxShdBasicMatrix.m_uMatrix[1]._m02_m12_m22);
//        r5.x = dot(vtxShdBasicMatrix.m_uMatrix[1]._m00_m10_m20, r8.xyz);
//        r5.y = dot(vtxShdBasicMatrix.m_uMatrix[1]._m00_m10_m20, r9.xyz);
//        r5.z = dot(vtxShdBasicMatrix.m_uMatrix[1]._m00_m10_m20, r12.xyz);
//        r6.x = dot(vtxShdBasicMatrix.m_uMatrix[1]._m01_m11_m21, r8.xyz);
//        r6.y = dot(vtxShdBasicMatrix.m_uMatrix[1]._m01_m11_m21, r9.xyz);
//        r6.z = dot(vtxShdBasicMatrix.m_uMatrix[1]._m01_m11_m21, r12.xyz);
//        r7.x = dot(vtxShdBasicMatrix.m_uMatrix[1]._m02_m12_m22, r8.xyz);
//        r7.y = dot(vtxShdBasicMatrix.m_uMatrix[1]._m02_m12_m22, r9.xyz);
//        r7.z = dot(vtxShdBasicMatrix.m_uMatrix[1]._m02_m12_m22, r12.xyz);
//        r3.x = dot(r5.xyz, r10.xyz);
//        r3.y = dot(r5.xyz, r11.xyz);
//        r3.z = dot(r5.xyz, r2.xyz);
//        r4.x = dot(r6.xyz, r10.xyz);
//        r4.y = dot(r6.xyz, r11.xyz);
//        r4.z = dot(r6.xyz, r2.xyz);
//        r5.x = dot(r7.xyz, r10.xyz);
//        r5.y = dot(r7.xyz, r11.xyz);
//        r5.z = dot(r7.xyz, r2.xyz);
//        r2.xyz = r5.xyz;
//      } else {
//        r3.x = r10.x;
//        r3.y = r11.x;
//        r3.z = r2.x;
//        r4.x = r10.y;
//        r4.y = r11.y;
//        r4.z = r2.y;
//        r2.x = r10.z;
//        r2.y = r11.z;
//      }
//    } else {
//      r3.x = r0.x;
//      r3.y = r1.x;
//      r3.z = r2.x;
//      r4.x = r0.y;
//      r4.y = r1.y;
//      r4.z = r2.y;
//      r2.x = r0.z;
//      r2.y = r1.z;
//    }
//    r0.xyz = (uint3)v10.zzz >> int3(16,8,24);
//    r0.w = v10.z;
//    r0.xyzw = (int4)r0.xywz & int4(255,255,255,255);
//    r1.xyzw = (uint4)r0.xyzw;
//    r0.xyzw = v2.xyzw * r1.xyzw;
//    r0.xyzw = float4(0.00392156886,0.00392156886,0.00392156886,0.00392156886) * r0.xyzw;
//    r1.x = v10.x;
//  } else {
//    r0.xyzw = v2.xyzw;
//    r3.x = vtxShdBasicMatrix.m_uMatrix[0]._m00;
//    r3.y = vtxShdBasicMatrix.m_uMatrix[0]._m01;
//    r3.z = vtxShdBasicMatrix.m_uMatrix[0]._m02;
//    r3.w = vtxShdBasicMatrix.m_uMatrix[0]._m03;
//    r4.x = vtxShdBasicMatrix.m_uMatrix[0]._m10;
//    r4.y = vtxShdBasicMatrix.m_uMatrix[0]._m11;
//    r4.z = vtxShdBasicMatrix.m_uMatrix[0]._m12;
//    r4.w = vtxShdBasicMatrix.m_uMatrix[0]._m13;
//    r2.x = vtxShdBasicMatrix.m_uMatrix[0]._m20;
//    r2.y = vtxShdBasicMatrix.m_uMatrix[0]._m21;
//    r2.z = vtxShdBasicMatrix.m_uMatrix[0]._m22;
//    r2.w = vtxShdBasicMatrix.m_uMatrix[0]._m23;
//    r1.x = 1;
//  }
//  r5.xyz = v0.xyz;
//  r5.w = 1;
//  r1.w = dot(r3.xyzw, r5.xyzw);
//  r3.x = dot(r4.xyzw, r5.xyzw);
//  r2.x = dot(r2.xyzw, r5.xyzw);
//  r3.xyzw = vtxShdBasicMatrix.m_uMatrix[1]._m01_m11_m21_m31 * r3.xxxx;
//  r3.xyzw = vtxShdBasicMatrix.m_uMatrix[1]._m00_m10_m20_m30 * r1.wwww + r3.xyzw;
//  r2.xyzw = vtxShdBasicMatrix.m_uMatrix[1]._m02_m12_m22_m32 * r2.xxxx + r3.xyzw;
//  r2.xyzw = vtxShdBasicMatrix.m_uMatrix[1]._m03_m13_m23_m33 + r2.xyzw;
//  r3.xyzw = vtxShdBasicMatrix.m_uMatrix[2]._m01_m11_m21_m31 * r2.yyyy;
//  r3.xyzw = vtxShdBasicMatrix.m_uMatrix[2]._m00_m10_m20_m30 * r2.xxxx + r3.xyzw;
//  r3.xyzw = vtxShdBasicMatrix.m_uMatrix[2]._m02_m12_m22_m32 * r2.zzzz + r3.xyzw;
//  o2.xyzw = vtxShdBasicMatrix.m_uMatrix[2]._m03_m13_m23_m33 * r2.wwww + r3.xyzw;
//  o1.xyzw = vtxShdBasicMatrix.m_uColor[0].xyzw * r0.xyzw;
//  r1.yz = v4.xy;
//  o0.xyz = r1.yzx;
//  return;
//}
//
///*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v1.3.16 on Wed Jun 16 23:50:13 2021
//
//
// Buffer Definitions:
//
// cbuffer CB0
// {
//
//   struct SVtxShdBasicMatrix_NoShadow
//   {
//
//       float4x4 m_uMatrix[3];         // Offset:    0
//       float4 m_uColor[3];            // Offset:  192
//
//   } vtxShdBasicMatrix;               // Offset:    0 Size:   240
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CB0                               cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz
// NORMAL                   0   xyzw        1     NONE   float
// COLOR                    0   xyzw        2     NONE   float   xyzw
// COLOR                    1   xyzw        3     NONE   float
// TEXCOORD                 0   xy          4     NONE   float   xy
// BLENDWEIGHT              0   xyzw        5     NONE   float
// BLENDINDICES             0   xyzw        6     NONE    uint
// TEXCOORD                 1   xyzw        7     NONE   float   xyzw
// TEXCOORD                 2   xyzw        8     NONE   float   xyzw
// TEXCOORD                 3   xyzw        9     NONE   float   xyzw
// TEXCOORD                 4   xyzw       10     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz
// COLOR                    0   xyzw        1     NONE   float   xyzw
// SV_Position              0   xyzw        2      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[15], immediateIndexed
dcl_constantbuffer cb12[1], immediateIndexed
dcl_input v0.xyz
dcl_input v2.xyzw
dcl_input v4.xy
dcl_input v7.xyzw
dcl_input v8.xyzw
dcl_input v9.xyzw
dcl_input v10.xyz
dcl_output o0.xyz
dcl_output o1.xyzw
dcl_output_siv o2.xyzw, position
dcl_temps 13
eq r0.x, v10.y, l(1.000000)
if_nz r0.x
  dp4 r0.x, v7.xyzw, cb0[0].xyzw
  dp4 r1.x, v7.xyzw, cb0[1].xyzw
  dp4 r2.x, v7.xyzw, cb0[2].xyzw
  dp4 r3.w, v7.xyzw, cb0[3].xyzw
  dp4 r0.y, v8.xyzw, cb0[0].xyzw
  dp4 r1.y, v8.xyzw, cb0[1].xyzw
  dp4 r2.y, v8.xyzw, cb0[2].xyzw
  dp4 r4.w, v8.xyzw, cb0[3].xyzw
  dp4 r0.z, v9.xyzw, cb0[0].xyzw
  dp4 r1.z, v9.xyzw, cb0[1].xyzw
  dp4 r2.z, v9.xyzw, cb0[2].xyzw
  dp4 r2.w, v9.xyzw, cb0[3].xyzw
  if_nz cb0[14].x
    and r5.xyzw, cb0[14].xxxx, l(4, 8, 2, 16)
    dp3 r0.w, r0.xyzx, r0.xyzx
    sqrt r0.w, r0.w
    dp3 r1.w, r1.xyzx, r1.xyzx
    sqrt r1.w, r1.w
    dp3 r6.x, r2.xyzx, r2.xyzx
    sqrt r6.x, r6.x
    movc r0.w, r5.x, r0.w, l(1.000000)
    movc r1.w, r5.x, r1.w, l(1.000000)
    movc r5.x, r5.x, r6.x, l(1.000000)
    min r6.x, |r0.z|, |r0.x|
    max r6.y, |r0.z|, |r0.x|
    div r6.y, l(1.000000, 1.000000, 1.000000, 1.000000), r6.y
    mul r6.x, r6.y, r6.x
    mul r6.y, r6.x, r6.x
    mad r6.z, r6.y, l(0.0208350997), l(-0.085133)
    mad r6.z, r6.y, r6.z, l(0.180141)
    mad r6.z, r6.y, r6.z, l(-0.330299497)
    mad r6.y, r6.y, r6.z, l(0.999866)
    mul r6.z, r6.y, r6.x
    lt r6.w, |r0.z|, |r0.x|
    mad r6.z, r6.z, l(-2.000000), l(1.57079637)
    and r6.z, r6.w, r6.z
    mad r6.x, r6.x, r6.y, r6.z
    lt r6.y, r0.z, -r0.z
    and r6.y, r6.y, l(0xc0490fdb)
    add r6.x, r6.y, r6.x
    min r6.y, r0.z, r0.x
    max r6.z, r0.z, r0.x
    lt r6.y, r6.y, -r6.y
    ge r6.z, r6.z, -r6.z
    and r6.y, r6.z, r6.y
    movc r6.x, r6.y, -r6.x, r6.x
    add r6.x, -r6.x, l(1.570796)
    sincos r6.x, r7.x, -r6.x
    mov r8.x, -r7.x
    mov r8.y, r6.x
    mov r8.z, r7.x
    movc r6.xyzw, r5.yyyy, r8.yxzy, l(1.000000,0,0,1.000000)
    mul r7.xz, r0.wwww, r6.xxzx
    mul r7.yw, r1.wwww, r6.yyyw
    min r0.w, |cb0[4].z|, |cb0[5].z|
    max r1.w, |cb0[4].z|, |cb0[5].z|
    div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
    mul r0.w, r0.w, r1.w
    mul r1.w, r0.w, r0.w
    mad r5.y, r1.w, l(0.0208350997), l(-0.085133)
    mad r5.y, r1.w, r5.y, l(0.180141)
    mad r5.y, r1.w, r5.y, l(-0.330299497)
    mad r1.w, r1.w, r5.y, l(0.999866)
    mul r5.y, r0.w, r1.w
    lt r6.x, |cb0[5].z|, |cb0[4].z|
    mad r5.y, r5.y, l(-2.000000), l(1.57079637)
    and r5.y, r6.x, r5.y
    mad r0.w, r0.w, r1.w, r5.y
    lt r1.w, cb0[5].z, -cb0[5].z
    and r1.w, r1.w, l(0xc0490fdb)
    add r0.w, r0.w, r1.w
    min r1.w, cb0[4].z, cb0[5].z
    max r5.y, cb0[4].z, cb0[5].z
    lt r1.w, r1.w, -r1.w
    ge r5.y, r5.y, -r5.y
    and r1.w, r1.w, r5.y
    movc r0.w, r1.w, -r0.w, r0.w
    dp3 r1.w, cb0[4].xyzx, cb0[4].xyzx
    sqrt r1.w, r1.w
    dp3 r5.y, cb0[5].xyzx, cb0[5].xyzx
    sqrt r5.y, r5.y
    dp3 r6.x, cb0[6].xyzx, cb0[6].xyzx
    sqrt r6.z, r6.x
    sincos r8.x, r9.x, -r0.w
    mul r10.x, r1.w, r9.x
    mul r11.x, r5.y, r8.x
    mul r10.y, -r1.w, r8.x
    mul r11.y, r5.y, r9.x
    mov r10.z, l(0)
    movc r8.xyz, r5.zzzz, r10.xyzx, cb0[4].xyzx
    mov r11.z, l(0)
    movc r9.xyz, r5.zzzz, r11.xyzx, cb0[5].xyzx
    mov r6.xy, l(0,0,0,0)
    movc r6.xyz, r5.zzzz, r6.xyzx, cb0[6].xyzx
    dp2 r10.x, r8.xyxx, r7.xyxx
    dp2 r11.x, r8.xyxx, r7.zwzz
    mul r2.x, r5.x, r8.z
    dp2 r10.y, r9.xyxx, r7.xyxx
    dp2 r11.y, r9.xyxx, r7.zwzz
    mul r2.y, r5.x, r9.z
    dp2 r10.z, r6.xyxx, r7.xyxx
    dp2 r11.z, r6.xyxx, r7.zwzz
    mul r2.z, r5.x, r6.z
    if_nz r5.w
      mul r5.xyz, r4.wwww, cb0[5].xzyx
      mad r5.xyz, cb0[4].xzyx, r3.wwww, r5.xyzx
      mad r5.xyz, cb0[6].xzyx, r2.wwww, r5.xyzx
      add r5.xyz, r5.xyzx, cb0[7].xzyx
      min r0.w, |r5.y|, |r5.x|
      max r1.w, |r5.y|, |r5.x|
      div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
      mul r0.w, r0.w, r1.w
      mul r1.w, r0.w, r0.w
      mad r5.w, r1.w, l(0.0208350997), l(-0.085133)
      mad r5.w, r1.w, r5.w, l(0.180141)
      mad r5.w, r1.w, r5.w, l(-0.330299497)
      mad r1.w, r1.w, r5.w, l(0.999866)
      mul r5.w, r0.w, r1.w
      lt r6.x, |r5.y|, |r5.x|
      mad r5.w, r5.w, l(-2.000000), l(1.57079637)
      and r5.w, r6.x, r5.w
      mad r0.w, r0.w, r1.w, r5.w
      lt r1.w, r5.y, -r5.y
      and r1.w, r1.w, l(0xc0490fdb)
      add r0.w, r0.w, r1.w
      min r1.w, r5.y, r5.x
      max r5.w, r5.y, r5.x
      lt r1.w, r1.w, -r1.w
      ge r5.w, r5.w, -r5.w
      and r1.w, r1.w, r5.w
      movc r0.w, r1.w, -r0.w, r0.w
      sincos r6.x, r7.x, -r0.w
      mul r1.w, r5.y, r7.x
      mad r1.w, -r5.x, r6.x, r1.w
      min r5.x, |r1.w|, |r5.z|
      max r5.y, |r1.w|, |r5.z|
      div r5.y, l(1.000000, 1.000000, 1.000000, 1.000000), r5.y
      mul r5.x, r5.y, r5.x
      mul r5.y, r5.x, r5.x
      mad r5.w, r5.y, l(0.0208350997), l(-0.085133)
      mad r5.w, r5.y, r5.w, l(0.180141)
      mad r5.w, r5.y, r5.w, l(-0.330299497)
      mad r5.y, r5.y, r5.w, l(0.999866)
      mul r5.w, r5.y, r5.x
      lt r6.x, |r1.w|, |r5.z|
      mad r5.w, r5.w, l(-2.000000), l(1.57079637)
      and r5.w, r6.x, r5.w
      mad r5.x, r5.x, r5.y, r5.w
      lt r5.y, r1.w, -r1.w
      and r5.y, r5.y, l(0xc0490fdb)
      add r5.x, r5.y, r5.x
      min r5.y, r1.w, r5.z
      max r1.w, r1.w, r5.z
      lt r5.y, r5.y, -r5.y
      ge r1.w, r1.w, -r1.w
      and r1.w, r1.w, r5.y
      movc r1.w, r1.w, -r5.x, r5.x
      sincos r5.x, null, r1.w
      sincos r5.y, null, -r0.w
      sincos null, r6.xy, r5.xyxx
      mul r6.z, r5.y, r5.x
      mul r6.w, r5.y, -r6.x
      mul r7.y, -r5.x, r6.y
      mul r7.z, r6.y, r6.x
      dp3 r8.x, r6.yzwy, cb0[4].xyzx
      dp3 r9.x, r6.yzwy, cb0[5].xyzx
      dp3 r12.x, r6.yzwy, cb0[6].xyzx
      mov r5.z, r6.x
      dp2 r8.y, r5.zxzz, cb0[4].yzyy
      dp2 r9.y, r5.zxzz, cb0[5].yzyy
      dp2 r12.y, r5.zxzz, cb0[6].yzyy
      mov r7.x, r5.y
      dp3 r8.z, r7.xyzx, cb0[4].xyzx
      dp3 r9.z, r7.xyzx, cb0[5].xyzx
      dp3 r12.z, r7.xyzx, cb0[6].xyzx
      dp3 r5.x, cb0[4].xyzx, r8.xyzx
      dp3 r5.y, cb0[4].xyzx, r9.xyzx
      dp3 r5.z, cb0[4].xyzx, r12.xyzx
      dp3 r6.x, cb0[5].xyzx, r8.xyzx
      dp3 r6.y, cb0[5].xyzx, r9.xyzx
      dp3 r6.z, cb0[5].xyzx, r12.xyzx
      dp3 r7.x, cb0[6].xyzx, r8.xyzx
      dp3 r7.y, cb0[6].xyzx, r9.xyzx
      dp3 r7.z, cb0[6].xyzx, r12.xyzx
      dp3 r3.x, r5.xyzx, r10.xyzx
      dp3 r3.y, r5.xyzx, r11.xyzx
      dp3 r3.z, r5.xyzx, r2.xyzx
      dp3 r4.x, r6.xyzx, r10.xyzx
      dp3 r4.y, r6.xyzx, r11.xyzx
      dp3 r4.z, r6.xyzx, r2.xyzx
      dp3 r5.x, r7.xyzx, r10.xyzx
      dp3 r5.y, r7.xyzx, r11.xyzx
      dp3 r5.z, r7.xyzx, r2.xyzx
      mov r2.xyz, r5.xyzx
    else
      mov r3.x, r10.x
      mov r3.y, r11.x
      mov r3.z, r2.x
      mov r4.x, r10.y
      mov r4.y, r11.y
      mov r4.z, r2.y
      mov r2.x, r10.z
      mov r2.y, r11.z
    endif
  else
    mov r3.x, r0.x
    mov r3.y, r1.x
    mov r3.z, r2.x
    mov r4.x, r0.y
    mov r4.y, r1.y
    mov r4.z, r2.y
    mov r2.x, r0.z
    mov r2.y, r1.z
  endif
  ushr r0.xyz, v10.zzzz, l(16, 8, 24, 0)
  mov r0.w, v10.z
  and r0.xyzw, r0.xywz, l(255, 255, 255, 255)
  utof r1.xyzw, r0.xyzw
  mul r0.xyzw, r1.xyzw, v2.xyzw
  mul r0.xyzw, r0.xyzw, l(0.00392156886, 0.00392156886, 0.00392156886, 0.00392156886)
  mov r1.x, v10.x
else
  mov r0.xyzw, v2.xyzw
  mov r3.x, cb0[0].x
  mov r3.y, cb0[1].x
  mov r3.z, cb0[2].x
  mov r3.w, cb0[3].x
  mov r4.x, cb0[0].y
  mov r4.y, cb0[1].y
  mov r4.z, cb0[2].y
  mov r4.w, cb0[3].y
  mov r2.x, cb0[0].z
  mov r2.y, cb0[1].z
  mov r2.z, cb0[2].z
  mov r2.w, cb0[3].z
  mov r1.x, l(1.000000)
endif
mov r5.xyz, v0.xyzx
mov r5.w, l(1.000000)
dp4 r1.w, r3.xyzw, r5.xyzw
dp4 r3.x, r4.xyzw, r5.xyzw
dp4 r2.x, r2.xyzw, r5.xyzw
mul r3.xyzw, r3.xxxx, cb0[5].xyzw
mad r3.xyzw, cb0[4].xyzw, r1.wwww, r3.xyzw
mad r2.xyzw, cb0[6].xyzw, r2.xxxx, r3.xyzw
add r2.xyzw, r2.xyzw, cb0[7].xyzw
mul r3.xyzw, r2.yyyy, cb0[9].xyzw
mad r3.xyzw, cb0[8].xyzw, r2.xxxx, r3.xyzw
mad r3.xyzw, cb0[10].xyzw, r2.zzzz, r3.xyzw
mad o2.xyzw, cb0[11].xyzw, r2.wwww, r3.xyzw
mul o1.xyzw, r0.xyzw, cb0[12].xyzw
mov r1.yz, v4.xxyx
mov o0.xyz, r1.yzxy
ret
// Approximately 256 instruction slots used
