//Screen space reflections.
// ---- Created with 3Dmigoto v1.3.16 on Sun Aug 28 23:24:03 2022
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[41];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  
  r0.xyzw = t1.Sample(s1_s, v1.xy).wxyz;
  r0.y = cmp(r0.x < 0.00100000005);
  r1.xyzw = t2.SampleLevel(s3_s, v1.xy, 0).xyzw;
  r0.z = cb1[7].z * r1.x + cb1[7].w;
  r1.z = 1 / r0.z;
  r0.z = cmp(cb1[5].z >= r1.z);
  if (r0.z != 0) {
    r2.xyzw = t0.Sample(s2_s, v1.xy).xyzw;
    r2.xyz = r2.xyz * float3(2,2,2) + float3(-1,-1,-1);
    r3.xyz = cb0[17].xyz * r2.yyy;
    r2.xyw = cb0[16].xyz * r2.xxx + r3.xyz;
    r2.xyz = cb0[18].xyz * r2.zzz + r2.xyw;
    r2.w = -r2.z;
    r0.z = dot(r2.xyw, r2.xyw);
    r0.z = rsqrt(r0.z);
    r2.xyz = r2.xyw * r0.zzz;
    r0.zw = cb0[9].zw * v1.xy;
	
	r0.z-=stereo.x*cb0[9].z*0.5;
	
    r0.zw = r0.zw * cb0[15].xy + cb0[15].zw;
    r1.xy = r0.zw * r1.zz;
    r0.z = dot(r1.xyz, r1.xyz);
    r0.z = rsqrt(r0.z);
    r3.xyz = r1.xyz * r0.zzz;
    r0.z = dot(r3.xyz, r2.xyz);
    r0.w = r0.z + r0.z;
    r2.xyz = r2.xyz * -r0.www + r3.xyz;
    r0.w = dot(r2.xyz, r2.xyz);
    r0.w = rsqrt(r0.w);
    r0.x = saturate(r0.x);
    r3.xy = r2.zz * r0.ww + -cb0[6].zw;
    r1.w = cb0[6].w + -cb0[6].z;
    r1.w = saturate(r3.x / r1.w);
    r0.x = r1.w * r0.x;
    r3.xz = float2(1,1) + -cb0[6].wx;
    r1.w = saturate(r3.y / r3.x);
    r1.w = saturate(-r1.w * cb0[6].y + 1);
    r0.z = 1 + -r0.z;
    r2.w = r0.z * r0.z;
    r2.w = r2.w * r2.w;
    r0.z = r2.w * r0.z;
    r0.z = saturate(r3.z * r0.z + cb0[6].x);
    r0.x = r1.w * r0.x;
    r0.x = r0.x * r0.z;
    r0.z = cmp(0 < r0.x);
    if (r0.z != 0) {
      r2.xyz = r2.xyz * r0.www + r1.xyz;
      r3.xyz = cb0[12].xyw * r2.yyy;
      r3.xyz = cb0[11].xyw * r2.xxx + r3.xyz;
      r3.xyz = cb0[13].xyw * r2.zzz + r3.xyz;
      r3.xyz = cb0[14].xyw + r3.xyz;
	  
	  r3.x+=stereo.x*r3.z;
	  
      r0.zw = r3.xy / r3.zz;
      r2.xy = r0.zw * float2(0.5,0.5) + float2(0.5,0.5);
      r1.xy = v1.xy;
      r2.xyz = r2.xyz + -r1.xyz;
      r0.z = min(cb0[20].x, cb0[20].y);
      r0.w = dot(r2.xy, r2.xy);
      r0.w = sqrt(r0.w);
      r0.z = r0.z / r0.w;
      r2.xyz = r2.xyz * r0.zzz;
      r0.zw = ddx(v1.xy);
      r3.xy = ddy(v1.xy);
      r4.xyz = cb0[7].yyy * r2.xyz;
      r1.xyw = r2.xyz * cb0[7].yyy + r1.xyz;
      r2.x = asint(cb0[7].x);
      r5.xyzw = float4(0,0,0,1);
      r8.xy = v1.xy;
      r6.xyzw = float4(0,0,0,1);
      r3.z = r0.x;
      r2.yzw = r4.xyz;
      r7.xyz = r1.xyw;
      r8.z = r1.z;
      r3.w = 0;
      r4.w = 1;
      r7.w = 0;
      while (true) {
        r8.w = cmp((int)r3.w >= asint(cb0[7].x));
        r7.w = 0;
        if (r8.w != 0) break;
        r8.w = cmp(r7.x < 0);
        r9.x = cmp(1 < r7.x);
        r8.w = (int)r8.w | (int)r9.x;
        if (r8.w != 0) {
          r7.w = 0;
          break;
        }
        r8.w = cmp(r7.y < 0);
        r9.x = cmp(1 < r7.y);
        r8.w = (int)r8.w | (int)r9.x;
        if (r8.w != 0) {
          r7.w = 0;
          break;
        }
        r8.w = cmp(r7.z < 0);
        r9.x = cmp(cb1[5].z < r7.z);
        r8.w = (int)r8.w | (int)r9.x;
        if (r8.w != 0) {
          r7.w = 0;
          break;
        }
        r9.xyzw = t2.SampleGrad(s3_s, r7.xy, r0.zwzz, r3.xyxx).xyzw;
        r8.w = cb1[7].z * r9.x + cb1[7].w;
		
		//Depth for borders.
		r11.x = r8.w;
		
        r8.w = 1 / r8.w;
        r9.x = -r8.w + r7.z;
        r9.y = cmp(r9.x >= 0);
        if (r9.y != 0) {
          r9.x = cmp(cb0[7].z >= r9.x);
          if (r9.x != 0) {
            r8.w = r8.w + -r8.z;
            r9.yz = r8.ww * r2.yz + r8.xy;
            r10.xyzw = t3.SampleGrad(s0_s, r9.yz, r0.zwzz, r3.xyxx).xyzw;
            r9.yz = float2(-0.5,-0.5) + r7.xy;
			
			//SSR borders.
			r9.y-=stereo.x*(1-stereo.y*r11.x)*0.5;
			
            r8.w = dot(r9.yz, r9.yz);
            r8.w = sqrt(r8.w);
            r8.w = r8.w + r8.w;
            r8.w = min(1, r8.w);
            r8.w = -r8.w * r8.w + 1;
            r8.w = r8.w * r3.z;
            r9.y = (int)r3.w;
            r9.y = r9.y / r2.x;
            r9.y = 1 + -r9.y;
            r6.w = -r8.w * r9.y + 1;
            r6.xyz = r6.www * -r10.xyz + r10.xyz;
            r5.xyzw = r6.xyzw;
            r7.w = -1;
            break;
          } else {
            r10.xyz = r2.yzw;
            r2.yzw = float3(0.5,0.5,0.5) * r10.xyz;
            r7.xyz = r10.xyz * float3(0.5,0.5,0.5) + r8.xyz;
          }
          r4.w = 0.5;
          r7.w = r9.x;
        } else {
          r9.xyz = r2.yzw;
          r2.yzw = r9.xyz * r4.www;
          r9.xyz = r9.xyz * r4.www + r7.xyz;
          r8.xyz = r7.xyz;
          r7.w = 0;
          r7.xyz = r9.xyz;
        }
        r3.w = (int)r3.w + 1;
        r5.xyzw = float4(0,0,0,1);
        r6.xyzw = float4(0,0,0,1);
      }
      r1.xyzw = r7.wwww ? r5.xyzw : r6.xyzw;
    } else {
      r1.xyzw = float4(0,0,0,1);
    }
  } else {
    r1.xyzw = float4(0,0,0,1);
  }
  o0.xyzw = r0.yyyy ? float4(0,0,0,1) : r1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sun Aug 28 23:24:03 2022
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[21], immediateIndexed
dcl_constantbuffer cb1[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 11
sample r0.xyzw, v1.xyxx, t1.wxyz, s1
lt r0.y, r0.x, l(0.001000)
sample_l r1.xyzw, v1.xyxx, t2.xyzw, s3, l(0.000000)
mad r0.z, cb1[7].z, r1.x, cb1[7].w
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
ge r0.z, cb1[5].z, r1.z
if_nz r0.z
  sample r2.xyzw, v1.xyxx, t0.xyzw, s2
  mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  mul r3.xyz, r2.yyyy, cb0[17].xyzx
  mad r2.xyw, cb0[16].xyxz, r2.xxxx, r3.xyxz
  mad r2.xyz, cb0[18].xyzx, r2.zzzz, r2.xywx
  mov r2.w, -r2.z
  dp3 r0.z, r2.xywx, r2.xywx
  rsq r0.z, r0.z
  mul r2.xyz, r0.zzzz, r2.xywx
  mul r0.zw, v1.xxxy, cb0[9].zzzw
  mad r0.zw, r0.zzzw, cb0[15].xxxy, cb0[15].zzzw
  mul r1.xy, r1.zzzz, r0.zwzz
  dp3 r0.z, r1.xyzx, r1.xyzx
  rsq r0.z, r0.z
  mul r3.xyz, r0.zzzz, r1.xyzx
  dp3 r0.z, r3.xyzx, r2.xyzx
  add r0.w, r0.z, r0.z
  mad r2.xyz, r2.xyzx, -r0.wwww, r3.xyzx
  dp3 r0.w, r2.xyzx, r2.xyzx
  rsq r0.w, r0.w
  mov_sat r0.x, r0.x
  mad r3.xy, r2.zzzz, r0.wwww, -cb0[6].zwzz
  add r1.w, -cb0[6].z, cb0[6].w
  div_sat r1.w, r3.x, r1.w
  mul r0.x, r0.x, r1.w
  add r3.xz, -cb0[6].wwxw, l(1.000000, 0.000000, 1.000000, 0.000000)
  div_sat r1.w, r3.y, r3.x
  mad_sat r1.w, -r1.w, cb0[6].y, l(1.000000)
  add r0.z, -r0.z, l(1.000000)
  mul r2.w, r0.z, r0.z
  mul r2.w, r2.w, r2.w
  mul r0.z, r0.z, r2.w
  mad_sat r0.z, r3.z, r0.z, cb0[6].x
  mul r0.x, r0.x, r1.w
  mul r0.x, r0.z, r0.x
  lt r0.z, l(0.000000), r0.x
  if_nz r0.z
    mad r2.xyz, r2.xyzx, r0.wwww, r1.xyzx
    mul r3.xyz, r2.yyyy, cb0[12].xywx
    mad r3.xyz, cb0[11].xywx, r2.xxxx, r3.xyzx
    mad r3.xyz, cb0[13].xywx, r2.zzzz, r3.xyzx
    add r3.xyz, r3.xyzx, cb0[14].xywx
    div r0.zw, r3.xxxy, r3.zzzz
    mad r2.xy, r0.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    mov r1.xy, v1.xyxx
    add r2.xyz, -r1.xyzx, r2.xyzx
    min r0.z, cb0[20].y, cb0[20].x
    dp2 r0.w, r2.xyxx, r2.xyxx
    sqrt r0.w, r0.w
    div r0.z, r0.z, r0.w
    mul r2.xyz, r0.zzzz, r2.xyzx
    deriv_rtx r0.zw, v1.xxxy
    deriv_rty r3.xy, v1.xyxx
    mul r4.xyz, r2.xyzx, cb0[7].yyyy
    mad r1.xyw, r2.xyxz, cb0[7].yyyy, r1.xyxz
    itof r2.x, cb0[7].x
    mov r5.xyzw, l(0,0,0,1.000000)
    mov r8.xy, v1.xyxx
    mov r6.xyzw, l(0,0,0,1.000000)
    mov r3.z, r0.x
    mov r2.yzw, r4.xxyz
    mov r7.xyz, r1.xywx
    mov r8.z, r1.z
    mov r3.w, l(0)
    mov r4.w, l(1.000000)
    mov r7.w, l(0)
    loop
      ige r8.w, r3.w, cb0[7].x
      mov r7.w, l(0)
      breakc_nz r8.w
      lt r8.w, r7.x, l(0.000000)
      lt r9.x, l(1.000000), r7.x
      or r8.w, r8.w, r9.x
      if_nz r8.w
        mov r7.w, l(0)
        break
      endif
      lt r8.w, r7.y, l(0.000000)
      lt r9.x, l(1.000000), r7.y
      or r8.w, r8.w, r9.x
      if_nz r8.w
        mov r7.w, l(0)
        break
      endif
      lt r8.w, r7.z, l(0.000000)
      lt r9.x, cb1[5].z, r7.z
      or r8.w, r8.w, r9.x
      if_nz r8.w
        mov r7.w, l(0)
        break
      endif
      sample_d r9.xyzw, r7.xyxx, t2.xyzw, s3, r0.zwzz, r3.xyxx
      mad r8.w, cb1[7].z, r9.x, cb1[7].w
      div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
      add r9.x, r7.z, -r8.w
      ge r9.y, r9.x, l(0.000000)
      if_nz r9.y
        ge r9.x, cb0[7].z, r9.x
        if_nz r9.x
          add r8.w, -r8.z, r8.w
          mad r9.yz, r8.wwww, r2.yyzy, r8.xxyx
          sample_d r10.xyzw, r9.yzyy, t3.xyzw, s0, r0.zwzz, r3.xyxx
          add r9.yz, r7.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
          dp2 r8.w, r9.yzyy, r9.yzyy
          sqrt r8.w, r8.w
          add r8.w, r8.w, r8.w
          min r8.w, r8.w, l(1.000000)
          mad r8.w, -r8.w, r8.w, l(1.000000)
          mul r8.w, r3.z, r8.w
          itof r9.y, r3.w
          div r9.y, r9.y, r2.x
          add r9.y, -r9.y, l(1.000000)
          mad r6.w, -r8.w, r9.y, l(1.000000)
          mad r6.xyz, r6.wwww, -r10.xyzx, r10.xyzx
          mov r5.xyzw, r6.xyzw
          mov r7.w, l(-1)
          break
        else
          mov r10.xyz, r2.yzwy
          mul r2.yzw, r10.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)
          mad r7.xyz, r10.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r8.xyzx
        endif
        mov r4.w, l(0.500000)
        mov r7.w, r9.x
      else
        mov r9.xyz, r2.yzwy
        mul r2.yzw, r4.wwww, r9.xxyz
        mad r9.xyz, r9.xyzx, r4.wwww, r7.xyzx
        mov r8.xyz, r7.xyzx
        mov r7.w, l(0)
        mov r7.xyz, r9.xyzx
      endif
      iadd r3.w, r3.w, l(1)
      mov r5.xyzw, l(0,0,0,1.000000)
      mov r6.xyzw, l(0,0,0,1.000000)
    endloop
    movc r1.xyzw, r7.wwww, r5.xyzw, r6.xyzw
  else
    mov r1.xyzw, l(0,0,0,1.000000)
  endif
else
  mov r1.xyzw, l(0,0,0,1.000000)
endif
movc o0.xyzw, r0.yyyy, l(0,0,0,1.000000), r1.xyzw
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
