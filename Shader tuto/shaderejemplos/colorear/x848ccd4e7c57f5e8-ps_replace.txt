// Also lava lines
// ---- Created with 3Dmigoto v1.3.16 on Wed Jul 17 21:58:30 2024
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[3];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[5];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[123];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : INTERP0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x; 
float convergence = stereo.y;

//v0.x -= separation * (0 - convergence);

  r0.x = (uint)cb2[4].x;
  r0.y = asuint(cb0[11].x);
  r1.xy = (uint2)v0.xy;
  r1.zw = float2(0,0);
  r0.z = t2.Load(r1.xyw).x;
  r0.y = r0.z * r0.y + 0.5;
  r0.y = (uint)r0.y;
  r0.x = (int)r0.x & (int)r0.y;
  r0.x = (uint)r0.x;
  r0.x = -0.100000001 + r0.x;
  r0.x = cmp(r0.x < 0);
  if (r0.x != 0) discard;
  r0.xy = cb0[122].zw * v0.xy;
  r0.xy = r0.xy * float2(2,2) + float2(-1,-1);
  r2.xyzw = cb0[83].xyzw * -r0.yyyy;
  r0.xyzw = cb0[82].xyzw * r0.xxxx + r2.xyzw;
  r2.x = t4.Load(r1.xyw).x;
  r1.xyz = t3.Load(r1.xyz).xyz;
  r1.x = dot(r1.xyz, cb2[2].xyz);
  r0.xyzw = cb0[84].xyzw * r2.xxxx + r0.xyzw;
  r0.xyzw = cb0[85].xyzw + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;
  r1.yzw = cb1[5].xyz * r0.yyy;
  r0.xyw = cb1[4].xyz * r0.xxx + r1.yzw;
  r0.xyz = cb1[6].xyz * r0.zzz + r0.xyw;
  r0.xyz = cb1[7].xyz + r0.xyz;
  r1.yzw = float3(1,-1,1) * r0.xyz;
  r0.xy = r0.xz * float2(1,1) + float2(0.5,0.5);
  r0.z = max(abs(r1.y), abs(r1.z));
  r0.z = max(r0.z, abs(r1.w));
  r0.z = 0.5 + -r0.z;
  r0.z = cmp(r0.z < 0);
  if (r0.z != 0) discard;
  r0.z = -2 + r1.x;
  r0.z = r1.x * r0.z;
  r0.z = saturate(cb2[3].z * r0.z + cb2[3].y);
  r0.w = cmp(cb2[3].z < 0);
  r0.z = r0.w ? r0.z : 1;
  r0.w = saturate(cb2[3].x);
  r0.z = r0.w * r0.z;
  r1.x = r0.x * cb2[0].w + cb2[2].w;
  r1.y = r0.y * cb2[1].w + cb2[3].w;
  r0.x = t1.SampleBias(s1_s, r1.xy, cb0[4].x).x;
  r0.y = t0.SampleBias(s0_s, r1.xy, cb0[4].x).x;
  o0.w = r0.y * r0.z;
  r0.xyw = cb3[2].xyz * r0.xxx;
  o0.xyz = r0.xyw * r0.zzz;
  
// When set to pink, this shows in right spot, but wrong depth.
o0 = float4(1,0,1,1);

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Jul 17 21:58:30 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xy
// INTERP                   0   xyzw        1     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[123], immediateIndexed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_constantbuffer CB2[5], immediateIndexed
dcl_constantbuffer CB3[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 3
ftou r0.x, cb2[4].x
utof r0.y, cb0[11].x
ftou r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t2.yzxw
mad r0.y, r0.z, r0.y, l(0.500000)
ftou r0.y, r0.y
and r0.x, r0.x, r0.y
utof r0.x, r0.x
add r0.x, r0.x, l(-0.100000)
lt r0.x, r0.x, l(0.000000)
discard_nz r0.x
mul r0.xy, v0.xyxx, cb0[122].zwzz
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xyzw, -r0.yyyy, cb0[83].xyzw
mad r0.xyzw, cb0[82].xyzw, r0.xxxx, r2.xyzw
ld_indexable(texture2d)(float,float,float,float) r2.x, r1.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t3.xyzw
dp3 r1.x, r1.xyzx, cb2[2].xyzx
mad r0.xyzw, cb0[84].xyzw, r2.xxxx, r0.xyzw
add r0.xyzw, r0.xyzw, cb0[85].xyzw
div r0.xyz, r0.xyzx, r0.wwww
mul r1.yzw, r0.yyyy, cb1[5].xxyz
mad r0.xyw, cb1[4].xyxz, r0.xxxx, r1.yzyw
mad r0.xyz, cb1[6].xyzx, r0.zzzz, r0.xywx
add r0.xyz, r0.xyzx, cb1[7].xyzx
mul r1.yzw, r0.xxyz, l(0.000000, 1.000000, -1.000000, 1.000000)
mad r0.xy, r0.xzxx, l(1.000000, 1.000000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
max r0.z, |r1.z|, |r1.y|
max r0.z, |r1.w|, r0.z
add r0.z, -r0.z, l(0.500000)
lt r0.z, r0.z, l(0.000000)
discard_nz r0.z
add r0.z, r1.x, l(-2.000000)
mul r0.z, r0.z, r1.x
mad_sat r0.z, cb2[3].z, r0.z, cb2[3].y
lt r0.w, cb2[3].z, l(0.000000)
movc r0.z, r0.w, r0.z, l(1.000000)
mov_sat r0.w, cb2[3].x
mul r0.z, r0.z, r0.w
mad r1.x, r0.x, cb2[0].w, cb2[2].w
mad r1.y, r0.y, cb2[1].w, cb2[3].w
sample_b_indexable(texture2d)(float,float,float,float) r0.x, r1.xyxx, t1.xyzw, s1, cb0[4].x
sample_b_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t0.yxzw, s0, cb0[4].x
mul o0.w, r0.z, r0.y
mul r0.xyw, r0.xxxx, cb3[2].xyxz
mul o0.xyz, r0.zzzz, r0.xywx
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
