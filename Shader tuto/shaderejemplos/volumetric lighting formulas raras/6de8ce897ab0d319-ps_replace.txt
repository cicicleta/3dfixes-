//Shadows PS 4. Low. Lighting like Shadows PS 2.
// ---- Created with 3Dmigoto v0.6.163 on Fri Jul 12 00:09:58 2024
TextureCube<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[28];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r10,r12;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  
  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s0_s, r1.xy).xyzw;
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1 / r0.w;
  r0.xyz = r0.xyz * r0.www;
  
  r0.x-=stereo.x*r0.z*cb2[10].x;
  
  r12.xyz = cb2[19].xyz * r0.yyy;
  r10.xyw = cb2[18].xyz * r0.xxx + r12.xyz;
  r10.xyz = cb2[20].xyz * r0.zzz + r10.xyw;
  r10.xyz = cb2[21].xyz + r10.xyz;
  
  r0.x+=stereo.x*stereo.y*cb2[10].x;
  
  r2.xyz = cb2[19].xyz * r0.yyy;
  r0.xyw = cb2[18].xyz * r0.xxx + r2.xyz;
  r0.xyz = cb2[20].xyz * r0.zzz + r0.xyw;
  r0.xyz = cb2[21].xyz + r0.xyz;
  r0.w = 1;
  r2.x = dot(r0.xyzw, cb0[16].xyzw);
  r2.y = dot(r0.xyzw, cb0[17].xyzw);
  r2.z = dot(r0.xyzw, cb0[18].xyzw);
  r2.w = dot(r0.xyzw, cb0[19].xyzw);
  r0.xyz = -cb1[4].xyz + r10.xyz;
  r2.xyzw = max(float4(0,0,0,0), r2.xyzw);
  r0.w = min(r2.x, r2.y);
  r0.w = min(r0.w, r2.z);
  r0.w = min(r0.w, r2.w);
  r0.w = cb0[20].x * r0.w;
  r0.w = min(1, r0.w);
  r2.xyz = cb0[23].xyz + -cb0[14].xyz;
  r2.xyz = r0.www * r2.xyz + cb0[14].xyz;
  r3.xyz = cb0[22].xyz + -cb0[15].xyz;
  r3.xyz = r0.www * r3.xyz + cb0[15].xyz;
  r2.xyz = -r3.xyz + r2.xyz;
  r4.xyzw = t3.Sample(s3_s, r1.xy).xyzw;
  r4.xyzw = r4.yxyz * float4(2,2,2,2) + float4(-1,-1,-1,-1);
  r1.z = dot(r4.yzw, r4.yzw);
  r1.z = rsqrt(r1.z);
  r4.xyzw = r4.xyzw * r1.zzzz;
  r1.z = r4.x * 0.5 + 0.5;
  r2.xyz = r1.zzz * r2.xyz + r3.xyz;
  r3.xyz = -cb0[25].xyz + cb0[24].xyz;
  r3.xyz = r1.zzz * r3.xyz + cb0[25].xyz;
  r2.xyz = -r3.xyz + r2.xyz;
  r5.xyzw = t1.Sample(s1_s, r1.xy).xyzw;
  r1.xyzw = t2.Sample(s2_s, r1.xy).xyzw;
  r2.xyz = r5.www * r2.xyz + r3.xyz;
  r3.xyz = cb0[21].xyz + -cb0[13].xyz;
  r3.xyz = r0.www * r3.xyz + cb0[13].xyz;
  r0.w = dot(-cb0[3].xyz, -cb0[3].xyz);
  r0.w = rsqrt(r0.w);
  r6.xyz = -cb0[3].xyz * r0.www;
  r0.w = saturate(dot(r4.yzw, r6.xyz));
  r7.xyz = r3.xyz * r0.www;
  r0.w = 1 + -r0.w;
  r0.w = r0.w * r0.w;
  r0.w = r0.w * -3 + 3;
  r0.w = min(1, r0.w);
  r2.xyz = r7.xyz * r5.www + r2.xyz;
  r1.x = 2.5 * r1.x;
  r2.xyz = r1.xxx * cb0[27].xxx + r2.xyz;
  r2.xyz = r5.xyz * r2.xyz;
  r5.xyz = r5.xyz * r1.yyy + -r3.xyz;
  r3.xyz = r1.zzz * r5.xyz + r3.xyz;
  r1.x = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r1.x);
  r0.xyz = r1.xxx * r0.xyz;
  r1.x = dot(r0.xyz, r4.yzw);
  r1.x = r1.x + r1.x;
  r5.xyz = r4.yzw * -r1.xxx + r0.xyz;
  r0.x = saturate(dot(-r0.xyz, r4.yzw));
  r0.x = 1 + -r0.x;
  r0.x = r0.x * r0.x;
  r0.x = r0.x * r0.x;
  r0.y = 1 + -r1.y;
  r0.z = 3 * r0.y;
  r0.x = r0.y * r0.x + r1.y;
  r4.xyzw = t4.SampleLevel(s4_s, r5.xyz, r0.z).xyzw;
  r0.y = saturate(dot(r5.xyz, r6.xyz));
  r0.y = log2(r0.y);
  r4.xyz = r2.xyz * r4.xyz + -r2.xyz;
  r1.xzw = r1.zzz * r4.xyz + r2.xyz;
  r0.z = r1.y * 56 + 8;
  r0.y = r0.z * r0.y;
  r0.y = exp2(r0.y);
  r0.y = r0.y * r0.w;
  r0.y = 0.649999976 * r0.y;
  r0.yzw = r3.xyz * r0.yyy;
  r0.xyz = r0.yzw * r0.xxx + r1.xzw;
  r0.xyz = log2(r0.xyz);
  r0.xyz = cb0[27].yyy * r0.xyz;
  r0.xyz = exp2(r0.xyz);
  o0.xyz = cb0[27].zzz * r0.xyz;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v0.6.163 on Fri Jul 12 00:09:58 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer CB0[28], immediateIndexed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_constantbuffer CB2[22], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 8
div r0.x, cb1[5].z, v2.z
mul r0.xyz, r0.xxxx, v2.xyzx
div r1.xy, v1.xyxx, v1.wwww
sample r2.xyzw, r1.xyxx, t0.xyzw, s0
mad r0.w, cb1[7].x, r2.x, cb1[7].y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r2.xyz, r0.yyyy, cb2[19].xyzx
mad r0.xyw, cb2[18].xyxz, r0.xxxx, r2.xyxz
mad r0.xyz, cb2[20].xyzx, r0.zzzz, r0.xywx
add r0.xyz, r0.xyzx, cb2[21].xyzx
mov r0.w, l(1.000000)
dp4 r2.x, r0.xyzw, cb0[16].xyzw
dp4 r2.y, r0.xyzw, cb0[17].xyzw
dp4 r2.z, r0.xyzw, cb0[18].xyzw
dp4 r2.w, r0.xyzw, cb0[19].xyzw
add r0.xyz, r0.xyzx, -cb1[4].xyzx
max r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r0.w, r2.y, r2.x
min r0.w, r2.z, r0.w
min r0.w, r2.w, r0.w
mul r0.w, r0.w, cb0[20].x
min r0.w, r0.w, l(1.000000)
add r2.xyz, -cb0[14].xyzx, cb0[23].xyzx
mad r2.xyz, r0.wwww, r2.xyzx, cb0[14].xyzx
add r3.xyz, -cb0[15].xyzx, cb0[22].xyzx
mad r3.xyz, r0.wwww, r3.xyzx, cb0[15].xyzx
add r2.xyz, r2.xyzx, -r3.xyzx
sample r4.xyzw, r1.xyxx, t3.xyzw, s3
mad r4.xyzw, r4.yxyz, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
dp3 r1.z, r4.yzwy, r4.yzwy
rsq r1.z, r1.z
mul r4.xyzw, r1.zzzz, r4.xyzw
mad r1.z, r4.x, l(0.500000), l(0.500000)
mad r2.xyz, r1.zzzz, r2.xyzx, r3.xyzx
add r3.xyz, cb0[24].xyzx, -cb0[25].xyzx
mad r3.xyz, r1.zzzz, r3.xyzx, cb0[25].xyzx
add r2.xyz, r2.xyzx, -r3.xyzx
sample r5.xyzw, r1.xyxx, t1.xyzw, s1
sample r1.xyzw, r1.xyxx, t2.xyzw, s2
mad r2.xyz, r5.wwww, r2.xyzx, r3.xyzx
add r3.xyz, -cb0[13].xyzx, cb0[21].xyzx
mad r3.xyz, r0.wwww, r3.xyzx, cb0[13].xyzx
dp3 r0.w, -cb0[3].xyzx, -cb0[3].xyzx
rsq r0.w, r0.w
mul r6.xyz, r0.wwww, -cb0[3].xyzx
dp3_sat r0.w, r4.yzwy, r6.xyzx
mul r7.xyz, r0.wwww, r3.xyzx
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, r0.w
mad r0.w, r0.w, l(-3.000000), l(3.000000)
min r0.w, r0.w, l(1.000000)
mad r2.xyz, r7.xyzx, r5.wwww, r2.xyzx
mul r1.x, r1.x, l(2.500000)
mad r2.xyz, r1.xxxx, cb0[27].xxxx, r2.xyzx
mul r2.xyz, r2.xyzx, r5.xyzx
mad r5.xyz, r5.xyzx, r1.yyyy, -r3.xyzx
mad r3.xyz, r1.zzzz, r5.xyzx, r3.xyzx
dp3 r1.x, r0.xyzx, r0.xyzx
rsq r1.x, r1.x
mul r0.xyz, r0.xyzx, r1.xxxx
dp3 r1.x, r0.xyzx, r4.yzwy
add r1.x, r1.x, r1.x
mad r5.xyz, r4.yzwy, -r1.xxxx, r0.xyzx
dp3_sat r0.x, -r0.xyzx, r4.yzwy
add r0.x, -r0.x, l(1.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.x
add r0.y, -r1.y, l(1.000000)
mul r0.z, r0.y, l(3.000000)
mad r0.x, r0.y, r0.x, r1.y
sample_l r4.xyzw, r5.xyzx, t4.xyzw, s4, r0.z
dp3_sat r0.y, r5.xyzx, r6.xyzx
log r0.y, r0.y
mad r4.xyz, r2.xyzx, r4.xyzx, -r2.xyzx
mad r1.xzw, r1.zzzz, r4.xxyz, r2.xxyz
mad r0.z, r1.y, l(56.000000), l(8.000000)
mul r0.y, r0.y, r0.z
exp r0.y, r0.y
mul r0.y, r0.w, r0.y
mul r0.y, r0.y, l(0.650000)
mul r0.yzw, r0.yyyy, r3.xxyz
mad r0.xyz, r0.yzwy, r0.xxxx, r1.xzwx
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, cb0[27].yyyy
exp r0.xyz, r0.xyzx
mul o0.xyz, r0.xyzx, cb0[27].zzzz
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
