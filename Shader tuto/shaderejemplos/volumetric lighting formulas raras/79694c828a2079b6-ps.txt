//Volumetric lighting PS 4.
// ---- Created with 3Dmigoto v1.3.16 on Sun Aug 28 15:19:02 2022
//Texture2D<float4> t4 : register(t4);
//
//Texture2D<float4> t3 : register(t3);
//
//Texture3D<float4> t2 : register(t2);
//
//Texture2D<float4> t1 : register(t1);
//
//Texture2D<float4> t0 : register(t0);
//
//SamplerState s4_s : register(s4);
//
//SamplerState s3_s : register(s3);
//
//SamplerState s2_s : register(s2);
//
//SamplerState s1_s : register(s1);
//
//SamplerState s0_s : register(s0);
//
//cbuffer cb2 : register(b2)
//{
//  float4 cb2[19];
//}
//
//cbuffer cb1 : register(b1)
//{
//  float4 cb1[7];
//}
//
//cbuffer cb0 : register(b0)
//{
//  float4 cb0[71];
//}
//
//
//
//
//// 3Dmigoto declarations
//#define cmp -
//Texture1D<float4> IniParams : register(t120);
//Texture2D<float4> StereoParams : register(t125);
//
//
//void main(
//  float4 v0 : SV_POSITION0,
//  float4 v1 : TEXCOORD0,
//  out float4 o0 : SV_Target0,
//  out float4 o1 : SV_Target1,
//  out float4 o2 : SV_Target2)
//{
//  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;
//  uint4 bitmask, uiDest;
//  float4 fDest;
//  
//  float4 stereo = StereoParams.Load(0);
//  
//  r0.xy = v1.xy / v1.ww;
//  r1.xyzw = t0.SampleLevel(s4_s, r0.xy, 0).xyzw;
//  r0.z = dot(r1.xy, float2(1,0.00392156886));
//  r1.xy = float2(1,1) + -r1.zw;
//  r1.xy = r1.xy * float2(2,2) + float2(-1,-1);
//  
//  r1.x-=stereo.x;
//  
//  r2.xyzw = cb0[47].xyzw * r1.yyyy;
//  r1.xyzw = cb0[46].xyzw * r1.xxxx + r2.xyzw;
//  r1.xyzw = cb0[48].xyzw + r1.xyzw;
//  r1.xyzw = cb0[49].xyzw + r1.xyzw;
//  r1.xyz = r1.xyz / r1.www;
//  r0.w = cb1[5].z / r1.z;
//  r1.xyz = -r1.xyz * r0.www;
//  r1.xyz = r1.xyz * r0.zzz;
//  r2.xyz = cb0[32].xyz * r1.yyy;
//  r1.xyw = cb0[31].xyz * r1.xxx + r2.xyz;
//  r1.xyz = cb0[33].xyz * r1.zzz + r1.xyw;
//  r1.xyz = cb0[34].xyz + r1.xyz;
//  r1.xyz = -cb1[4].xyz + r1.xyz;
//  r0.z = dot(r1.xyz, r1.xyz);
//  r0.w = rsqrt(r0.z);
//  r1.xyz = r1.xyz * r0.www;
//  r0.w = cos(cb0[39].w);
//  r1.w = r0.w * r0.w;
//  r2.x = dot(cb0[39].xyz, r1.xyz);
//  r2.yzw = cb1[4].xyz + -cb0[44].xyz;
//  r3.x = dot(cb0[39].xyz, r2.yzw);
//  r3.y = r2.x * r2.x + -r1.w;
//  r3.z = dot(r2.yzw, r1.xyz);
//  r3.w = r3.z * r1.w;
//  r2.x = r3.x * r2.x + -r3.w;
//  r3.w = r2.x + r2.x;
//  r2.y = dot(r2.yzw, r2.yzw);
//  r1.w = r2.y * r1.w;
//  r1.w = r3.x * r3.x + -r1.w;
//  r1.w = r1.w * r3.y;
//  r1.w = 4 * r1.w;
//  r1.w = r3.w * r3.w + -r1.w;
//  r2.z = cmp(r1.w >= 0);
//  if (r2.z != 0) {
//    r1.w = sqrt(r1.w);
//    r2.z = r3.y + r3.y;
//    r2.w = -r2.x * 2 + -r1.w;
//    r2.w = r2.w / r2.z;
//    r1.w = -r2.x * 2 + r1.w;
//    r1.w = r1.w / r2.z;
//    r2.x = r3.z + r3.z;
//    r2.y = -cb0[43].z * cb0[43].z + r2.y;
//    r2.y = 4 * r2.y;
//    r2.x = r2.x * r2.x + -r2.y;
//    r2.y = cmp(r2.x >= 0);
//    r2.x = sqrt(r2.x);
//    r2.z = -r3.z * 2 + -r2.x;
//    r2.x = -r3.z * 2 + r2.x;
//    r3.xy = float2(0.5,0.5) * r2.zx;
//    r2.xy = r2.yy ? r3.xy : 0;
//    r3.xyz = r1.xyz * r2.www + cb1[4].xyz;
//    r4.xyz = r1.xyz * r1.www + cb1[4].xyz;
//    r5.xyz = r1.xyz * r2.xxx + cb1[4].xyz;
//    r6.xyz = r1.xyz * r2.yyy + cb1[4].xyz;
//    r3.xyz = -cb0[44].xyz + r3.xyz;
//    r4.xyz = -cb0[44].xyz + r4.xyz;
//    r5.xyz = -cb0[44].xyz + r5.xyz;
//    r6.xyz = -cb0[44].xyz + r6.xyz;
//    r2.z = dot(r3.xyz, cb0[39].xyz);
//    r2.z = cmp(0 < r2.z);
//    r3.x = dot(r3.xyz, r3.xyz);
//    r3.x = sqrt(r3.x);
//    r3.x = cmp(r3.x < cb0[43].z);
//    r2.z = r2.z ? r3.x : 0;
//    r3.x = min(100000, r2.w);
//    r3.x = r2.z ? r3.x : 100000;
//    r2.w = max(-100000, r2.w);
//    r2.w = r2.z ? r2.w : -100000;
//    r2.z = r2.z ? 0.000000 : 0;
//    r3.y = dot(r4.xyz, cb0[39].xyz);
//    r3.y = cmp(0 < r3.y);
//    r3.z = dot(r4.xyz, r4.xyz);
//    r3.z = sqrt(r3.z);
//    r3.z = cmp(r3.z < cb0[43].z);
//    r3.y = r3.z ? r3.y : 0;
//    r3.z = min(100000, r1.w);
//    r3.z = r3.y ? r3.z : 100000;
//    r1.w = max(-100000, r1.w);
//    r1.w = r3.y ? r1.w : -100000;
//    r2.z = (int)r2.z + (int)-r3.y;
//    r3.y = dot(r5.xyz, r5.xyz);
//    r3.y = rsqrt(r3.y);
//    r4.xyz = r5.xyz * r3.yyy;
//    r3.y = dot(r4.xyz, cb0[39].xyz);
//    r3.y = cmp(r0.w < r3.y);
//    r4.xy = min(float2(100000,100000), r2.xy);
//    r3.w = r3.y ? r4.x : 100000;
//    r2.xy = max(float2(-100000,-100000), r2.xy);
//    r2.x = r3.y ? r2.x : -100000;
//    r2.z = (int)r2.z + (int)-r3.y;
//    r3.y = dot(r6.xyz, r6.xyz);
//    r3.y = rsqrt(r3.y);
//    r4.xzw = r6.xyz * r3.yyy;
//    r3.y = dot(r4.xzw, cb0[39].xyz);
//    r0.w = cmp(r0.w < r3.y);
//    r3.y = r0.w ? r4.y : 100000;
//    r2.y = r0.w ? r2.y : -100000;
//    r0.w = (int)-r0.w + (int)r2.z;
//    r2.z = min(r3.w, r3.y);
//    r2.z = min(r3.z, r2.z);
//    r2.z = min(r3.x, r2.z);
//    r2.x = max(r2.x, r2.y);
//    r1.w = max(r2.x, r1.w);
//    r1.w = max(r2.w, r1.w);
//    r0.w = cmp((int)r0.w == 2);
//    r2.x = cmp(r1.w >= 0);
//    r0.w = r0.w ? r2.x : 0;
//    r2.x = max(0, r2.z);
//    r2.y = max(0, r1.w);
//  } else {
//    r2.xy = float2(0,0);
//    r0.w = 0;
//  }
//  r0.w = ~(int)r0.w;
//  if (r0.w != 0) discard;
//  r0.z = sqrt(r0.z);
//  r0.z = -0.0500000007 + r0.z;
//  r0.w = max(r2.y, r2.x);
//  r0.z = min(r0.w, r0.z);
//  r0.w = min(r2.y, r2.x);
//  r1.w = cmp(r0.w >= r0.z);
//  if (r1.w != 0) discard;
//  r2.xyz = r1.xyz * r0.www;
//  r3.xyz = r1.xyz * r0.www + cb1[4].xyz;
//  r1.xyz = r1.xyz * r0.zzz + cb1[4].xyz;
//  r0.zw = cb1[6].xy * cb0[70].xx;
//  r0.xy = r0.zw * r0.xy;
//  r0.xy = r0.xy / cb0[45].xx;
//  r0.zw = cmp(r0.xy >= -r0.xy);
//  r0.xy = frac(abs(r0.xy));
//  r0.xy = r0.zw ? r0.xy : -r0.xy;
//  r0.xy = cb0[45].xx * r0.xy;
//  r0.z = dot(r2.xyz, r2.xyz);
//  r0.z = sqrt(r0.z);
//  r2.xyz = r1.xyz + -r3.xyz;
//  r0.w = min(128, cb0[22].y);
//  r1.w = (int)r0.w;
//  r2.w = dot(r2.xyz, r2.xyz);
//  r3.w = rsqrt(r2.w);
//  r2.xyz = r3.www * r2.xyz;
//  r2.w = sqrt(r2.w);
//  r0.w = trunc(r0.w);
//  r2.w = r2.w / r0.w;
//  r4.xyz = r2.xyz * r2.www;
//  r5.xyz = -cb0[44].xyz + r3.xyz;
//  r6.xyz = cb2[17].xyz * r5.yyy;
//  r5.xyw = cb2[16].xyz * r5.xxx + r6.xyz;
//  r5.xyz = cb2[18].xyz * r5.zzz + r5.xyw;
//  r1.xyz = -cb0[44].xyz + r1.xyz;
//  r6.xyz = cb2[17].xyz * r1.yyy;
//  r6.xyz = cb2[16].xyz * r1.xxx + r6.xyz;
//  r1.xyz = cb2[18].xyz * r1.zzz + r6.xyz;
//  r1.xyz = r1.xyz + -r5.xyz;
//  r3.w = dot(r1.xyz, r1.xyz);
//  r4.w = sqrt(r3.w);
//  r0.w = r4.w / r0.w;
//  r3.w = rsqrt(r3.w);
//  r1.xyz = r3.www * r1.xyz;
//  r6.xyz = r1.xyz * r0.www;
//  r0.xy = r0.xy / cb0[45].xx;
//  r7.xyzw = t1.SampleLevel(s3_s, r0.xy, 0).xyzw;
//  r0.x = cb0[40].x + r7.x;
//  r0.x = frac(r0.x);
//  r5.xyz = r6.xyz * r0.xxx + r5.xyz;
//  r3.xyz = r4.xyz * r0.xxx + r3.xyz;
//  r0.x = cb0[22].x * r0.z;
//  r0.x = cb0[22].w * r0.x;
//  r0.y = cb0[22].w * r2.w;
//  r3.w = dot(cb0[42].xyz, r2.xyz);
//  r0.z = r3.w * r0.z;
//  r3.w = r2.w / r3.w;
//  r4.x = max(0, cb0[17].x);
//  r4.y = cb0[43].z * cb0[43].z;
//  r4.y = 1 / r4.y;
//  r6.xyz = -cb0[41].xyz + cb0[40].yzw;
//  r4.z = (int)cb0[24].z;
//  r4.z = (int)r4.z + -1;
//  r4.z = (int)r4.z;
//  r7.xyzw = float4(0,0,0,0);
//  r8.xyzw = float4(0,0,0,0);
//  r9.xyz = r5.xyz;
//  r10.xyz = r3.xyz;
//  r11.xyz = float3(0,0,0);
//  r4.w = r0.x;
//  r5.w = r0.z;
//  r6.w = 0;
//  
//  r10.x+=stereo.x*stereo.y*cb0[31].x;
//  r10.y+=stereo.x*stereo.y*cb0[31].y;
//  r10.z+=stereo.x*stereo.y*cb0[31].z;
//  
//  while (true) {
//    r9.w = cmp((int)r6.w >= (int)r1.w);
//    if (r9.w != 0) break;
//    r9.w = 0.5 * r9.z;
//    r9.w = 1 / r9.w;
//    r12.xy = r9.ww * r9.xy;
//    r12.zw = float2(0.5,0.5) * r12.xy;
//    r12.xy = r12.xy * float2(0.5,0.5) + float2(0.5,0.5);
//    r13.xyz = -cb0[44].xyz + r10.xyz;
//    r14.xyz = cb0[20].xyz + r10.xyz;
//    r14.xyz = cb0[21].xyz * r14.xyz;
//    r14.xyzw = t2.SampleLevel(s2_s, r14.xyz, 1).xyzw;
//    r9.w = -0.5 + r14.w;
//    r9.w = r9.w * r4.x + 0.5;
//    r9.w = cb0[22].x * r9.w;
//    r10.w = dot(r13.xyz, r13.xyz);
//    r11.w = rsqrt(r10.w);
//    r13.xyz = r13.xyz * r11.www;
//    r11.w = dot(r13.xyz, -r2.xyz);
//    r11.w = -cb0[18].w * r11.w + cb0[18].z;
//    r11.w = log2(r11.w);
//    r11.w = 1.5 * r11.w;
//    r11.w = exp2(r11.w);
//    r11.w = cb0[18].y / r11.w;
//    r11.w = cb0[18].x * r11.w;
//    r13.x = r10.w * r4.y;
//    r13.xyzw = t3.SampleLevel(s0_s, r13.xx, 0).xyzw;
//    r14.xyzw = t4.SampleLevel(s1_s, r12.xy, 0).xyzw;
//    r12.x = r14.w * r13.x;
//    r10.w = -r10.w * r4.y + 1;
//    r12.y = dot(r12.zw, r12.zw);
//    r12.y = sqrt(r12.y);
//    r12.y = -r12.y * 2 + 1;
//    r10.w = min(r12.y, r10.w);
//    r10.w = cb0[41].w * r10.w;
//    r10.w = saturate(0.5 * r10.w);
//    r12.yzw = r10.www * r6.xyz + cb0[41].xyz;
//    r10.w = r12.x * r11.w;
//    r11.w = -1.44269502 * r4.w;
//    r11.w = exp2(r11.w);
//    r10.w = r11.w * r10.w;
//    r10.w = r10.w * r9.w;
//    r10.w = r10.w * r2.w;
//    r10.w = max(0, r10.w);
//    r13.xyz = r12.yzw * r10.www;
//    r11.xyz = r12.yzw * r10.www + r11.xyz;
//    r12.xyz = cb0[3].xyz * r13.xyz;
//    r12.xz = r12.xx + r12.yz;
//    r10.w = r13.z * cb0[3].z + r12.x;
//    r11.w = r12.y * r12.z;
//    r11.w = sqrt(r11.w);
//    r11.w = dot(cb0[3].ww, r11.ww);
//    r10.w = r11.w + r10.w;
//    r11.w = r5.w / cb0[24].x;
//    r11.w = log2(r11.w);
//    r11.w = cb0[24].y * r11.w;
//    r11.w = exp2(r11.w);
//    r12.x = r11.w * r4.z;
//    r12.x = saturate(r12.x);
//    r12.x = 1 + -r12.x;
//    r12.x = saturate(r12.x * r10.w);
//    r13.xyzw = saturate(r11.wwww * r4.zzzz + float4(-1,-2,-3,-4));
//    r13.xyzw = float4(1,1,1,1) + -r13.xyzw;
//    r13.xyzw = saturate(r13.wxyz * r10.wwww);
//    r12.yzw = r13.yzw;
//    r7.xyzw = r12.xyzw + r7.xyzw;
//    r12.xyz = saturate(r11.www * r4.zzz + float3(-5,-6,-7));
//    r12.xyz = float3(1,1,1) + -r12.xyz;
//    r13.yzw = saturate(r12.xyz * r10.www);
//    r8.xyzw = r13.xyzw + r8.xyzw;
//    r4.w = r0.y * r9.w + r4.w;
//    r9.xyz = r1.xyz * r0.www + r9.xyz;
//    r10.xyz = r2.xyz * r2.www + r10.xyz;
//    r5.w = r5.w + r3.w;
//    r6.w = (int)r6.w + 1;
//  }
//  o1.xyzw = r7.xyzw;
//  o2.xyzw = r8.xyzw;
//  o0.xyz = r11.xyz;
//  o0.w = 0;
//  return;
//}
//
///*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sun Aug 28 15:19:02 2022
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[71], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[19], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 35
dcl_resource_texture2d (float,float,float,float) t125
ld_indexable(texture2d)(float,float,float,float) r25.xyzw, l(0, 0, 0, 0), t125.xyzw
div r0.xy, v1.xyxx, v1.wwww
sample_l r1.xyzw, r0.xyxx, t0.xyzw, s4, l(0.000000)
dp2 r0.z, r1.xyxx, l(1.000000, 0.00392156886, 0.000000, 0.000000)
add r1.xy, -r1.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)

add r1.x, -r25.x, r1.x

mul r2.xyzw, r1.yyyy, cb0[47].xyzw
mad r1.xyzw, cb0[46].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb0[48].xyzw
add r1.xyzw, r1.xyzw, cb0[49].xyzw
div r1.xyz, r1.xyzx, r1.wwww
div r0.w, cb1[5].z, r1.z
mul r1.xyz, r0.wwww, -r1.xyzx
mul r1.xyz, r0.zzzz, r1.xyzx
mul r2.xyz, r1.yyyy, cb0[32].xyzx
mad r1.xyw, cb0[31].xyxz, r1.xxxx, r2.xyxz
mad r1.xyz, cb0[33].xyzx, r1.zzzz, r1.xywx
add r1.xyz, r1.xyzx, cb0[34].xyzx
add r1.xyz, r1.xyzx, -cb1[4].xyzx

mul r26.xyz, r25.yyyy, cb0[31].xyzx
mad r20.xyz, -r25.xxxx, r26.xyzx, cb0[44].xyzx

dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.w, r0.z
mul r1.xyz, r0.wwww, r1.xyzx
sincos null, r0.w, cb0[39].w
mul r1.w, r0.w, r0.w
dp3 r2.x, cb0[39].xyzx, r1.xyzx
add r2.yzw, -r20.xxyz, cb1[4].xxyz
dp3 r3.x, cb0[39].xyzx, r2.yzwy
mad r3.y, r2.x, r2.x, -r1.w
dp3 r3.z, r2.yzwy, r1.xyzx
mul r3.w, r1.w, r3.z
mad r2.x, r3.x, r2.x, -r3.w
add r3.w, r2.x, r2.x
dp3 r2.y, r2.yzwy, r2.yzwy
mul r1.w, r1.w, r2.y
mad r1.w, r3.x, r3.x, -r1.w
mul r1.w, r3.y, r1.w
mul r1.w, r1.w, l(4.000000)
mad r1.w, r3.w, r3.w, -r1.w
ge r2.z, r1.w, l(0.000000)
if_nz r2.z
  sqrt r1.w, r1.w
  add r2.z, r3.y, r3.y
  mad r2.w, -r2.x, l(2.000000), -r1.w
  div r2.w, r2.w, r2.z
  mad r1.w, -r2.x, l(2.000000), r1.w
  div r1.w, r1.w, r2.z
  add r2.x, r3.z, r3.z
  mad r2.y, -cb0[43].z, cb0[43].z, r2.y
  mul r2.y, r2.y, l(4.000000)
  mad r2.x, r2.x, r2.x, -r2.y
  ge r2.y, r2.x, l(0.000000)
  sqrt r2.x, r2.x
  mad r2.z, -r3.z, l(2.000000), -r2.x
  mad r2.x, -r3.z, l(2.000000), r2.x
  mul r3.xy, r2.zxzz, l(0.500000, 0.500000, 0.000000, 0.000000)
  and r2.xy, r2.yyyy, r3.xyxx
  mad r3.xyz, r1.xyzx, r2.wwww, cb1[4].xyzx
  mad r4.xyz, r1.xyzx, r1.wwww, cb1[4].xyzx
  mad r5.xyz, r1.xyzx, r2.xxxx, cb1[4].xyzx
  mad r6.xyz, r1.xyzx, r2.yyyy, cb1[4].xyzx
  
  add r3.xyz, r3.xyzx, -r20.xyzx
  add r4.xyz, r4.xyzx, -r20.xyzx
  add r5.xyz, r5.xyzx, -r20.xyzx
  add r6.xyz, r6.xyzx, -r20.xyzx
  
  dp3 r2.z, r3.xyzx, cb0[39].xyzx
  lt r2.z, l(0.000000), r2.z
  dp3 r3.x, r3.xyzx, r3.xyzx
  sqrt r3.x, r3.x
  lt r3.x, r3.x, cb0[43].z
  and r2.z, r2.z, r3.x
  min r3.x, r2.w, l(100000.000000)
  movc r3.x, r2.z, r3.x, l(100000.000000)
  max r2.w, r2.w, l(-100000.000000)
  movc r2.w, r2.z, r2.w, l(-100000.000000)
  and r2.z, r2.z, l(1)
  dp3 r3.y, r4.xyzx, cb0[39].xyzx
  lt r3.y, l(0.000000), r3.y
  dp3 r3.z, r4.xyzx, r4.xyzx
  sqrt r3.z, r3.z
  lt r3.z, r3.z, cb0[43].z
  and r3.y, r3.z, r3.y
  min r3.z, r1.w, l(100000.000000)
  movc r3.z, r3.y, r3.z, l(100000.000000)
  max r1.w, r1.w, l(-100000.000000)
  movc r1.w, r3.y, r1.w, l(-100000.000000)
  iadd r2.z, r2.z, -r3.y
  dp3 r3.y, r5.xyzx, r5.xyzx
  rsq r3.y, r3.y
  mul r4.xyz, r3.yyyy, r5.xyzx
  dp3 r3.y, r4.xyzx, cb0[39].xyzx
  lt r3.y, r0.w, r3.y
  min r4.xy, r2.xyxx, l(100000.000000, 100000.000000, 0.000000, 0.000000)
  movc r3.w, r3.y, r4.x, l(100000.000000)
  max r2.xy, r2.xyxx, l(-100000.000000, -100000.000000, 0.000000, 0.000000)
  movc r2.x, r3.y, r2.x, l(-100000.000000)
  iadd r2.z, r2.z, -r3.y
  dp3 r3.y, r6.xyzx, r6.xyzx
  rsq r3.y, r3.y
  mul r4.xzw, r3.yyyy, r6.xxyz
  dp3 r3.y, r4.xzwx, cb0[39].xyzx
  lt r0.w, r0.w, r3.y
  movc r3.y, r0.w, r4.y, l(100000.000000)
  movc r2.y, r0.w, r2.y, l(-100000.000000)
  iadd r0.w, -r0.w, r2.z
  min r2.z, r3.y, r3.w
  min r2.z, r2.z, r3.z
  min r2.z, r2.z, r3.x
  max r2.x, r2.y, r2.x
  max r1.w, r1.w, r2.x
  max r1.w, r1.w, r2.w
  ieq r0.w, r0.w, l(2)
  ge r2.x, r1.w, l(0.000000)
  and r0.w, r0.w, r2.x
  max r2.x, r2.z, l(0.000000)
  max r2.y, r1.w, l(0.000000)
else
  mov r2.xy, l(0,0,0,0)
  mov r0.w, l(0)
endif
not r0.w, r0.w
discard_nz r0.w
sqrt r0.z, r0.z
add r0.z, r0.z, l(-0.050000)
max r0.w, r2.x, r2.y
min r0.z, r0.z, r0.w
min r0.w, r2.x, r2.y
ge r1.w, r0.w, r0.z
discard_nz r1.w
mul r2.xyz, r0.wwww, r1.xyzx
mad r3.xyz, r1.xyzx, r0.wwww, cb1[4].xyzx
mad r1.xyz, r1.xyzx, r0.zzzz, cb1[4].xyzx
mul r0.zw, cb0[70].xxxx, cb1[6].xxxy
mul r0.xy, r0.xyxx, r0.zwzz
div r0.xy, r0.xyxx, cb0[45].xxxx
ge r0.zw, r0.xxxy, -r0.xxxy
frc r0.xy, |r0.xyxx|
movc r0.xy, r0.zwzz, r0.xyxx, -r0.xyxx
mul r0.xy, r0.xyxx, cb0[45].xxxx
dp3 r0.z, r2.xyzx, r2.xyzx
sqrt r0.z, r0.z
add r2.xyz, -r3.xyzx, r1.xyzx
min r0.w, cb0[22].y, l(128.000000)
ftoi r1.w, r0.w
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r3.w, r2.w
mul r2.xyz, r2.xyzx, r3.wwww
sqrt r2.w, r2.w
round_z r0.w, r0.w
div r2.w, r2.w, r0.w
mul r4.xyz, r2.wwww, r2.xyzx

add r5.xyz, r3.xyzx, -r20.xyzx

mul r6.xyz, r5.yyyy, cb2[17].xyzx
mad r5.xyw, cb2[16].xyxz, r5.xxxx, r6.xyxz
mad r5.xyz, cb2[18].xyzx, r5.zzzz, r5.xywx

add r1.xyz, r1.xyzx, -r20.xyzx

mul r6.xyz, r1.yyyy, cb2[17].xyzx
mad r6.xyz, cb2[16].xyzx, r1.xxxx, r6.xyzx
mad r1.xyz, cb2[18].xyzx, r1.zzzz, r6.xyzx
add r1.xyz, -r5.xyzx, r1.xyzx
dp3 r3.w, r1.xyzx, r1.xyzx
sqrt r4.w, r3.w
div r0.w, r4.w, r0.w
rsq r3.w, r3.w
mul r1.xyz, r1.xyzx, r3.wwww
mul r6.xyz, r0.wwww, r1.xyzx
div r0.xy, r0.xyxx, cb0[45].xxxx
sample_l r7.xyzw, r0.xyxx, t1.xyzw, s3, l(0.000000)
add r0.x, r7.x, cb0[40].x
frc r0.x, r0.x
mad r5.xyz, r6.xyzx, r0.xxxx, r5.xyzx
mad r3.xyz, r4.xyzx, r0.xxxx, r3.xyzx
mul r0.x, r0.z, cb0[22].x
mul r0.x, r0.x, cb0[22].w
mul r0.y, r2.w, cb0[22].w
dp3 r3.w, cb0[42].xyzx, r2.xyzx
mul r0.z, r0.z, r3.w
div r3.w, r2.w, r3.w
max r4.x, cb0[17].x, l(0.000000)
mul r4.y, cb0[43].z, cb0[43].z
div r4.y, l(1.000000, 1.000000, 1.000000, 1.000000), r4.y
add r6.xyz, cb0[40].yzwy, -cb0[41].xyzx
ftoi r4.z, cb0[24].z
iadd r4.z, r4.z, l(-1)
itof r4.z, r4.z
mov r7.xyzw, l(0,0,0,0)
mov r8.xyzw, l(0,0,0,0)
mov r9.xyz, r5.xyzx
mov r10.xyz, r3.xyzx
mov r11.xyz, l(0,0,0,0)
mov r4.w, r0.x
mov r5.w, r0.z
mov r6.w, l(0)

//mul r26.xyz, r25.yyyy, cb0[31].xyzx
//mad r10.xyz, r25.xxxx, r26.xyzx, r10.xyzx

loop
  ige r9.w, r6.w, r1.w
  breakc_nz r9.w
  mul r9.w, r9.z, l(0.500000)
  div r9.w, l(1.000000, 1.000000, 1.000000, 1.000000), r9.w
  mul r12.xy, r9.xyxx, r9.wwww
  mul r12.zw, r12.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
  mad r12.xy, r12.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  
  add r13.xyz, r10.xyzx, -r20.xyzx
  
  add r14.xyz, r10.xyzx, cb0[20].xyzx
  mul r14.xyz, r14.xyzx, cb0[21].xyzx
  sample_l r14.xyzw, r14.xyzx, t2.xyzw, s2, l(1.000000)
  add r9.w, r14.w, l(-0.500000)
  mad r9.w, r9.w, r4.x, l(0.500000)
  mul r9.w, r9.w, cb0[22].x
  dp3 r10.w, r13.xyzx, r13.xyzx
  rsq r11.w, r10.w
  mul r13.xyz, r11.wwww, r13.xyzx
  dp3 r11.w, r13.xyzx, -r2.xyzx
  mad r11.w, -cb0[18].w, r11.w, cb0[18].z
  log r11.w, r11.w
  mul r11.w, r11.w, l(1.500000)
  exp r11.w, r11.w
  div r11.w, cb0[18].y, r11.w
  mul r11.w, r11.w, cb0[18].x
  mul r13.x, r4.y, r10.w
  sample_l r13.xyzw, r13.xxxx, t3.xyzw, s0, l(0.000000)
  sample_l r14.xyzw, r12.xyxx, t4.xyzw, s1, l(0.000000)
  mul r12.x, r13.x, r14.w
  mad r10.w, -r10.w, r4.y, l(1.000000)
  dp2 r12.y, r12.zwzz, r12.zwzz
  sqrt r12.y, r12.y
  mad r12.y, -r12.y, l(2.000000), l(1.000000)
  min r10.w, r10.w, r12.y
  mul r10.w, r10.w, cb0[41].w
  mul_sat r10.w, r10.w, l(0.500000)
  mad r12.yzw, r10.wwww, r6.xxyz, cb0[41].xxyz
  mul r10.w, r11.w, r12.x
  mul r11.w, r4.w, l(-1.442695)
  exp r11.w, r11.w
  mul r10.w, r10.w, r11.w
  mul r10.w, r9.w, r10.w
  mul r10.w, r2.w, r10.w
  max r10.w, r10.w, l(0.000000)
  mul r13.xyz, r10.wwww, r12.yzwy
  mad r11.xyz, r12.yzwy, r10.wwww, r11.xyzx
  mul r12.xyz, r13.xyzx, cb0[3].xyzx
  add r12.xz, r12.yyzy, r12.xxxx
  mad r10.w, r13.z, cb0[3].z, r12.x
  mul r11.w, r12.z, r12.y
  sqrt r11.w, r11.w
  dp2 r11.w, cb0[3].wwww, r11.wwww
  add r10.w, r10.w, r11.w
  div r11.w, r5.w, cb0[24].x
  log r11.w, r11.w
  mul r11.w, r11.w, cb0[24].y
  exp r11.w, r11.w
  mul r12.x, r4.z, r11.w
  mov_sat r12.x, r12.x
  add r12.x, -r12.x, l(1.000000)
  mul_sat r12.x, r10.w, r12.x
  mad_sat r13.xyzw, r11.wwww, r4.zzzz, l(-1.000000, -2.000000, -3.000000, -4.000000)
  add r13.xyzw, -r13.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul_sat r13.xyzw, r10.wwww, r13.wxyz
  mov r12.yzw, r13.yyzw
  add r7.xyzw, r7.xyzw, r12.xyzw
  mad_sat r12.xyz, r11.wwww, r4.zzzz, l(-5.000000, -6.000000, -7.000000, 0.000000)
  add r12.xyz, -r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul_sat r13.yzw, r10.wwww, r12.xxyz
  add r8.xyzw, r8.xyzw, r13.xyzw
  mad r4.w, r0.y, r9.w, r4.w
  mad r9.xyz, r1.xyzx, r0.wwww, r9.xyzx
  mad r10.xyz, r2.xyzx, r2.wwww, r10.xyzx
  add r5.w, r3.w, r5.w
  iadd r6.w, r6.w, l(1)
endloop
mov o1.xyzw, r7.xyzw
mov o2.xyzw, r8.xyzw
mov o0.xyz, r11.xyzx
mov o0.w, l(0)
ret
// Approximately 0 instruction slots used
