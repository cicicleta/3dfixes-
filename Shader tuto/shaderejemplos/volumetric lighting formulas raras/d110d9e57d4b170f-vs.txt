// Sparks in lava flows near smoke
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Aug  2 13:01:02 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_VertexID              0   x           0   VERTID    uint   x
// SV_InstanceID            0   x           1   INSTID    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 6   xyz         4     NONE   float   xyz
// INDEX                    0   xy          5     NONE    uint   xy
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[82], immediateIndexed
dcl_constantbuffer CB1[16], dynamicIndexed
dcl_constantbuffer CB2[1], immediateIndexed
dcl_constantbuffer CB3[2], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_raw t0
dcl_resource_raw t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_structured t3, 8
dcl_input_sgv v0.x, vertex_id
dcl_input_sgv v1.x, instance_id
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xy
dcl_temps 20

	dcl_resource_texture2d (float,float,float,float) t125
	ld_indexable(texture2d)(float,float,float,float) r19.xyzw, l(0, 0, 0, 0), t125.xyzw

ushr r0.x, v0.x, l(2)
ishl r0.y, v1.x, l(11)
iadd r0.x, r0.y, r0.x
udiv r0.y, null, r0.x, l(1000)
iadd r0.z, cb2[0].x, l(-1)
umin r0.y, r0.z, r0.y
imad r0.x, r0.y, l(-1000), r0.x
iadd r0.y, r0.y, cb2[0].w
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.z, cb3[r0.y + 0].y, l(0), t3.xxxx
uge r0.z, r0.x, r0.z
if_nz r0.z
  mov o0.xyzw, l(-1,0,0,0)
  mov o2.xyzw, l(0,0,0,0)
  mov o3.xyzw, l(0,0,0,0)
  mov o4.xyz, l(0,0,0,0)
  mov o1.xy, l(0,0,0,0)
  mov o5.xy, l(0,0,0,0)
  ret
endif
bfi r0.w, l(29), l(3), r0.x, l(3)
imad r0.w, cb3[r0.y + 0].x, l(0x00003800), r0.w
ishl r0.w, r0.w, l(2)
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.w, r0.w, t1.xxxx
if_z r0.w
  mov o0.xyzw, l(-1,0,0,0)
  mov o2.xyzw, l(0,0,0,0)
  mov o3.xyzw, l(0,0,0,0)
  mov o4.xyz, l(0,0,0,0)
  mov o1.xy, l(0,0,0,0)
  mov o5.xy, l(0,0,0,0)
  ret
endif
ishl r1.xw, r0.xxxy, l(3, 0, 0, 3)
imad r1.x, cb3[r0.y + 0].x, l(0x00003800), r1.x
ishl r1.x, r1.x, l(2)
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r1.xyz, r1.x, t1.xyzx
mul r2.xyz, cb0[67].xyzx, cb1[r1.w + 0].yyyy
mad r2.xyz, cb0[66].xyzx, cb1[r1.w + 0].xxxx, r2.xyzx
mad r2.xyz, cb0[68].xyzx, cb1[r1.w + 0].zzzz, r2.xyzx
mul r3.xyz, cb0[67].xyzx, cb1[r1.w + 1].yyyy
mad r3.xyz, cb0[66].xyzx, cb1[r1.w + 1].xxxx, r3.xyzx
mad r3.xyz, cb0[68].xyzx, cb1[r1.w + 1].zzzz, r3.xyzx
mul r4.xyz, cb0[67].xyzx, cb1[r1.w + 2].yyyy
mad r4.xyz, cb0[66].xyzx, cb1[r1.w + 2].xxxx, r4.xyzx
mad r4.xyz, cb0[68].xzyx, cb1[r1.w + 2].zzzz, r4.xzyx
eq r2.w, cb0[25].w, l(0.000000)
if_nz r2.w
  mul r5.xyz, cb0[21].yyyy, cb1[r1.w + 5].xyzx
  mad r5.xyz, cb1[r1.w + 4].xyzx, cb0[21].xxxx, r5.xyzx
  mad r5.xyz, cb1[r1.w + 6].xyzx, cb0[21].zzzz, r5.xyzx
  add r5.xyz, r5.xyzx, cb1[r1.w + 7].xyzx
  add r5.xyz, r1.xyzx, -r5.xyzx
  dp3 r2.w, r5.xyzx, r5.xyzx
  rsq r2.w, r2.w
  mul r5.xyz, r2.wwww, r5.xyzx
  mov r2.z, r3.y
  mov r2.x, r4.z
  mul r6.xyz, r5.yzxy, r2.xyzx
  mad r6.xyz, r2.zxyz, r5.zxyz, -r6.xyzx
  dp3 r2.w, r6.xyzx, r6.xyzx
  lt r3.w, r2.w, l(0.000010)
  rsq r2.w, r2.w
  mul r6.xyz, r2.wwww, r6.xyzx
  movc r6.xyz, r3.wwww, l(1.000000,0,0,0), r6.xyzx
  mul r7.xyz, r5.zxyz, r6.yzxy
  mad r4.xyz, r5.yzxy, r6.zxyz, -r7.xyzx
else
  mov r5.x, r2.z
  mov r5.y, r3.z
  mov r5.z, r4.y
  mov r6.x, r2.x
  mov r6.y, r3.x
  mov r6.z, r4.x
  mov r4.x, r2.y
  mov r4.y, r3.y
  mov r5.xyz, -r5.xyzx
endif
if_z r0.w
  mov o0.x, r0.z
  mov o0.yzw, l(0,0,0,0)
  mov o2.xyzw, l(0,0,0,0)
  mov o3.xyzw, l(0,0,0,0)
  mov o4.xyz, l(0,0,0,0)
  mov o1.xy, l(0,0,0,0)
  mov o5.xy, l(0,0,0,0)
  ret
endif
imad r0.z, cb3[r0.y + 0].y, l(160), l(144)
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.yzw, r0.z, t0.xxyz
imad r0.z, cb3[r0.y + 0].x, l(0x00003800), r0.x
ishl r0.z, r0.z, l(2)
iadd r0.zw, r0.zzzz, l(0, 0, 0x00008000, 0x0000d000)
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.z, r0.z, t1.xxxx
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.w, r0.w, t1.xxxx
bfi r0.x, l(29), l(3), r0.x, l(4)
imad r0.x, cb3[r0.y + 0].x, l(0x00003800), r0.x
ishl r0.x, r0.x, l(2)
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.x, r0.x, t1.xxxx
dp3 r3.x, r6.xyzx, r6.xyzx
rsq r3.x, r3.x
mul r3.xyz, r3.xxxx, r6.xyzx
dp3 r3.w, r4.xyzx, r4.xyzx
rsq r3.w, r3.w
mul r4.xyz, r3.wwww, r4.xyzx
dp3 r3.w, r5.xyzx, r5.xyzx
rsq r3.w, r3.w
mul r5.xyz, r3.wwww, r5.xyzx
div_sat r0.x, r0.x, r0.w
mad r0.x, r0.x, l(0.992187500), l(0.00390625000)
lt r0.w, l(0.500000), r2.z
mul r2.z, r0.x, l(128.000000)
frc r2.z, r2.z
mad r2.z, -r2.z, l(0.00781250000), r0.x
add r2.z, r2.z, l(0.00390625000)
movc r2.x, r0.w, r2.z, r0.x
sample_l_indexable(texture2d)(float,float,float,float) r6.xyzw, r2.xyxx, t2.xyzw, s0, l(0.000000)
mul o2.xyz, r2.wwww, r6.xyzx
and r0.xw, v0.xxxx, l(1, 0, 0, 2)
utof r2.xy, r0.xwxx
mul r2.z, r2.y, l(0.500000)
add r6.xy, r2.xzxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r3.xyz, r0.zzzz, r3.xyzx
mul r4.xyz, r0.zzzz, r4.xyzx
mov r7.x, r3.x
mov r7.y, r4.x
mov r7.z, r1.x
mov r6.z, l(1.000000)
dp3 r0.x, r7.xyzx, r6.xyzx
mov r7.x, r3.y
mov r7.y, r4.y
mov r7.z, r1.y
dp3 r0.w, r7.xyzx, r6.xyzx
mov r1.x, r3.z
mov r1.y, r4.z
dp3 r1.x, r1.xyzx, r6.xyzx
mul r3.xyz, r0.wwww, cb1[r1.w + 1].xyzx
mad r3.xyz, cb1[r1.w + 0].xyzx, r0.xxxx, r3.xyzx
mad r1.xyz, cb1[r1.w + 2].xyzx, r1.xxxx, r3.xyzx
add r1.xyz, r1.xyzx, cb1[r1.w + 3].xyzx
mul r3.xyzw, r1.yyyy, cb0[79].xyzw
mad r3.xyzw, cb0[78].xyzw, r1.xxxx, r3.xyzw
mad r3.xyzw, cb0[80].xyzw, r1.zzzz, r3.xyzw


	// add o0.xyzw, r3.xyzw, cb0[81].xyzw
	add r20.xyzw, r3.xyzw, cb0[81].xyzw

	// Move to stereo.
	add r19.w, r20.w, -r19.y		// (o0.w - convergence)
	mad r20.x, r19.w, r19.x, r20.x	// o0.x += separation * (o0.w - convergence)

	mov o0.xyzw, r20.xyzw

rcp r0.x, r0.z
mul r1.xyz, r0.xxxx, r5.xyzx
dp3 r3.x, -r1.xyzx, cb1[r1.w + 4].xyzx
dp3 r3.y, -r1.xyzx, cb1[r1.w + 5].xyzx
dp3 r3.z, -r1.xyzx, cb1[r1.w + 6].xyzx
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mul r1.xyz, r0.xxxx, r3.xyzx
mul r0.x, r0.z, r0.z
mul r0.x, r0.z, r0.x
lt r0.x, r0.x, l(0.000000)
movc r0.x, r0.x, l(-1.000000), l(1.000000)
mul o4.xyz, r1.xyzx, r0.xxxx
mov o2.w, r6.w
mov o3.xyzw, l(1.000000,0,0,0)
mov o1.xy, r2.xzxx
mov o5.y, cb3[r0.y + 0].y
mov o5.x, r0.y
ret
// Approximately 0 instruction slots used

///////////////////////////////// HLSL Code /////////////////////////////////
// // ---- Created with 3Dmigoto v1.3.16 on Fri Aug  2 13:01:02 2024
// struct t3_t {
//   float val[2];
// };
// StructuredBuffer<t3_t> t3 : register(t3);
//
// Texture2D<float4> t2 : register(t2);
//
// SamplerState s0_s : register(s0);
//
// cbuffer cb3 : register(b3)
// {
//   float4 cb3[2];
// }
//
// cbuffer cb2 : register(b2)
// {
//   float4 cb2[1];
// }
//
// cbuffer cb1 : register(b1)
// {
//   float4 cb1[16];
// }
//
// cbuffer cb0 : register(b0)
// {
//   float4 cb0[82];
// }
//
//
//
//
// // 3Dmigoto declarations
// #define cmp -
// Texture1D<float4> IniParams : register(t120);
// Texture2D<float4> StereoParams : register(t125);
//
//
// void main(
//   uint v0 : SV_VertexID0,
//   uint v1 : SV_InstanceID0,
//   out float4 o0 : SV_POSITION0,
//   out float2 o1 : TEXCOORD0,
//   out float4 o2 : COLOR0,
//   out float4 o3 : TEXCOORD1,
//   out float3 o4 : TEXCOORD6,
//   out uint2 o5 : INDEX0)
// {
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_resource_raw t0
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_resource_raw t1
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_input_sgv v0.x, vertex_id
// // Needs manual fix for instruction:
// // unknown dcl_: dcl_input_sgv v1.x, instance_id
//   float4 r0,r1,r2,r3,r4,r5,r6,r7;
//   uint4 bitmask, uiDest;
//   float4 fDest;
//
//   r0.x = (uint)v0.x >> 2;
//   r0.y = (uint)v1.x << 11;
//   r0.x = (int)r0.y + (int)r0.x;
//   uiDest.y = (uint)r0.x / 1000;
//   r0.y = uiDest.y;
//   r0.z = asint(cb2[0].x) + -1;
//   r0.y = min((uint)r0.y, (uint)r0.z);
//   r0.x = mad((int)r0.y, -1000, (int)r0.x);
//   r0.y = (int)r0.y + asint(cb2[0].w);
//   r0.z = t3[cb3[r0.y+0].y].val[0/4];
//   r0.z = cmp((uint)r0.x >= (uint)r0.z);
//   if (r0.z != 0) {
//     o0.xyzw = float4(-1,0,0,0);
//     o2.xyzw = float4(0,0,0,0);
//     o3.xyzw = float4(0,0,0,0);
//     o4.xyz = float3(0,0,0);
//     o1.xy = float2(0,0);
//     o5.xy = float2(0,0);
//     return;
//   }
//   bitmask.w = ((~(-1 << 29)) << 3) & 0xffffffff;  r0.w = (((uint)r0.x << 3) & bitmask.w) | ((uint)3 & ~bitmask.w);
//   r0.w = mad(asint(cb3[r0.y+0].x), 0x00003800, (int)r0.w);
//   r0.w = (uint)r0.w << 2;
// // No code for instruction (needs manual fix):
// ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.w, r0.w, t1.xxxx
//   if (r0.w == 0) {
//     o0.xyzw = float4(-1,0,0,0);
//     o2.xyzw = float4(0,0,0,0);
//     o3.xyzw = float4(0,0,0,0);
//     o4.xyz = float3(0,0,0);
//     o1.xy = float2(0,0);
//     o5.xy = float2(0,0);
//     return;
//   }
//   r1.xw = (uint2)r0.xy << int2(3,3);
//   r1.x = mad(asint(cb3[r0.y+0].x), 0x00003800, (int)r1.x);
//   r1.x = (uint)r1.x << 2;
// // No code for instruction (needs manual fix):
// ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r1.xyz, r1.x, t1.xyzx
//   r2.xyz = cb1[r1.w+0].yyy * cb0[67].xyz;
//   r2.xyz = cb0[66].xyz * cb1[r1.w+0].xxx + r2.xyz;
//   r2.xyz = cb0[68].xyz * cb1[r1.w+0].zzz + r2.xyz;
//   r3.xyz = cb1[r1.w+1].yyy * cb0[67].xyz;
//   r3.xyz = cb0[66].xyz * cb1[r1.w+1].xxx + r3.xyz;
//   r3.xyz = cb0[68].xyz * cb1[r1.w+1].zzz + r3.xyz;
//   r4.xyz = cb1[r1.w+2].yyy * cb0[67].xyz;
//   r4.xyz = cb0[66].xyz * cb1[r1.w+2].xxx + r4.xyz;
//   r4.xyz = cb0[68].xzy * cb1[r1.w+2].zzz + r4.xzy;
//   r2.w = cmp(cb0[25].w == 0.000000);
//   if (r2.w != 0) {
//     r5.xyz = cb1[r1.w+5].xyz * cb0[21].yyy;
//     r5.xyz = cb1[r1.w+4].xyz * cb0[21].xxx + r5.xyz;
//     r5.xyz = cb1[r1.w+6].xyz * cb0[21].zzz + r5.xyz;
//     r5.xyz = cb1[r1.w+7].xyz + r5.xyz;
//     r5.xyz = -r5.xyz + r1.xyz;
//     r2.w = dot(r5.xyz, r5.xyz);
//     r2.w = rsqrt(r2.w);
//     r5.xyz = r5.xyz * r2.www;
//     r2.z = r3.y;
//     r2.x = r4.z;
//     r6.xyz = r2.xyz * r5.yzx;
//     r6.xyz = r2.zxy * r5.zxy + -r6.xyz;
//     r2.w = dot(r6.xyz, r6.xyz);
//     r3.w = cmp(r2.w < 9.99999975e-06);
//     r2.w = rsqrt(r2.w);
//     r6.xyz = r6.xyz * r2.www;
//     r6.xyz = r3.www ? float3(1,0,0) : r6.xyz;
//     r7.xyz = r6.yzx * r5.zxy;
//     r4.xyz = r5.yzx * r6.zxy + -r7.xyz;
//   } else {
//     r5.x = r2.z;
//     r5.y = r3.z;
//     r5.z = r4.y;
//     r6.x = r2.x;
//     r6.y = r3.x;
//     r6.z = r4.x;
//     r4.x = r2.y;
//     r4.y = r3.y;
//     r5.xyz = -r5.xyz;
//   }
//   if (r0.w == 0) {
//     o0.x = r0.z;
//     o0.yzw = float3(0,0,0);
//     o2.xyzw = float4(0,0,0,0);
//     o3.xyzw = float4(0,0,0,0);
//     o4.xyz = float3(0,0,0);
//     o1.xy = float2(0,0);
//     o5.xy = float2(0,0);
//     return;
//   }
//   r0.z = mad(asint(cb3[r0.y+0].y), 160, 144);
// // No code for instruction (needs manual fix):
// ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.yzw, r0.z, t0.xxyz
//   r0.z = mad(asint(cb3[r0.y+0].x), 0x00003800, (int)r0.x);
//   r0.z = (uint)r0.z << 2;
//   r0.zw = (int2)r0.zz + int2(0x8000,0xd000);
// // No code for instruction (needs manual fix):
// ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.z, r0.z, t1.xxxx
// // No code for instruction (needs manual fix):
// ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.w, r0.w, t1.xxxx
//   bitmask.x = ((~(-1 << 29)) << 3) & 0xffffffff;  r0.x = (((uint)r0.x << 3) & bitmask.x) | ((uint)4 & ~bitmask.x);
//   r0.x = mad(asint(cb3[r0.y+0].x), 0x00003800, (int)r0.x);
//   r0.x = (uint)r0.x << 2;
// // No code for instruction (needs manual fix):
// ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.x, r0.x, t1.xxxx
//   r3.x = dot(r6.xyz, r6.xyz);
//   r3.x = rsqrt(r3.x);
//   r3.xyz = r6.xyz * r3.xxx;
//   r3.w = dot(r4.xyz, r4.xyz);
//   r3.w = rsqrt(r3.w);
//   r4.xyz = r4.xyz * r3.www;
//   r3.w = dot(r5.xyz, r5.xyz);
//   r3.w = rsqrt(r3.w);
//   r5.xyz = r5.xyz * r3.www;
//   r0.x = saturate(r0.x / r0.w);
//   r0.x = r0.x * 0.9921875 + 0.00390625;
//   r0.w = cmp(0.5 < r2.z);
//   r2.z = 128 * r0.x;
//   r2.z = frac(r2.z);
//   r2.z = -r2.z * 0.0078125 + r0.x;
//   r2.z = 0.00390625 + r2.z;
//   r2.x = r0.w ? r2.z : r0.x;
//   r6.xyzw = t2.SampleLevel(s0_s, r2.xy, 0).xyzw;
//   o2.xyz = r6.xyz * r2.www;
//   r0.xw = (int2)v0.xx & int2(1,2);
//   r2.xy = (uint2)r0.xw;
//   r2.z = 0.5 * r2.y;
//   r6.xy = float2(-0.5,-0.5) + r2.xz;
//   r3.xyz = r3.xyz * r0.zzz;
//   r4.xyz = r4.xyz * r0.zzz;
//   r7.x = r3.x;
//   r7.y = r4.x;
//   r7.z = r1.x;
//   r6.z = 1;
//   r0.x = dot(r7.xyz, r6.xyz);
//   r7.x = r3.y;
//   r7.y = r4.y;
//   r7.z = r1.y;
//   r0.w = dot(r7.xyz, r6.xyz);
//   r1.x = r3.z;
//   r1.y = r4.z;
//   r1.x = dot(r1.xyz, r6.xyz);
//   r3.xyz = cb1[r1.w+1].xyz * r0.www;
//   r3.xyz = cb1[r1.w+0].xyz * r0.xxx + r3.xyz;
//   r1.xyz = cb1[r1.w+2].xyz * r1.xxx + r3.xyz;
//   r1.xyz = cb1[r1.w+3].xyz + r1.xyz;
//   r3.xyzw = cb0[79].xyzw * r1.yyyy;
//   r3.xyzw = cb0[78].xyzw * r1.xxxx + r3.xyzw;
//   r3.xyzw = cb0[80].xyzw * r1.zzzz + r3.xyzw;
//   o0.xyzw = cb0[81].xyzw + r3.xyzw;
//   r0.x = rcp(r0.z);
//   r1.xyz = r5.xyz * r0.xxx;
//   r3.x = dot(-r1.xyz, cb1[r1.w+4].xyz);
//   r3.y = dot(-r1.xyz, cb1[r1.w+5].xyz);
//   r3.z = dot(-r1.xyz, cb1[r1.w+6].xyz);
//   r0.x = dot(r3.xyz, r3.xyz);
//   r0.x = rsqrt(r0.x);
//   r1.xyz = r3.xyz * r0.xxx;
//   r0.x = r0.z * r0.z;
//   r0.x = r0.x * r0.z;
//   r0.x = cmp(r0.x < 0);
//   r0.x = r0.x ? -1 : 1;
//   o4.xyz = r0.xxx * r1.xyz;
//   o2.w = r6.w;
//   o3.xyzw = float4(1,0,0,0);
//   o1.xy = r2.xz;
//   o5.y = cb3[r0.y+0].y;
//   o5.x = r0.y;
//   return;
// }
//////////////////////////////// HLSL Errors ////////////////////////////////
// W:\Games\The Planet Crafter\ShaderFixes\d110d9e57d4b170f-vs_replace.txt(86,18-27): error X3004: undeclared identifier 'raw_buffer'
// W:\Games\The Planet Crafter\ShaderFixes\d110d9e57d4b170f-vs_replace.txt(86,1-28): error X3004: undeclared identifier 'ld_raw_indexable'
/////////////////////////////////////////////////////////////////////////////
