//Volumetric lighting PS 1. Sun rays.
// ---- Created with geo-11 v0.6.198 on Thu Sep  5 00:38:32 2024

cbuffer CB0 : register(b0)
{
  float4x4 ipmat : packoffset(c0);
}

cbuffer CB1 : register(b1)
{
  float4x4 ivshadowmat : packoffset(c0);
}

cbuffer CB2 : register(b2)
{
  float4 uparam : packoffset(c0);
}

cbuffer CB3 : register(b3)
{
  float2 zparam : packoffset(c0);
}

SamplerState depthmap_samp_s : register(s0);
SamplerState shadowmap_samp_s : register(s1);
Texture2D<float4> depthmap_tex : register(t0);
Texture2D<float4> shadowmap_tex : register(t1);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float2 v0 : TEXCOORD0,
  float4 v1 : COLOR0,
  float4 v2 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r10;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  
  r0.w = depthmap_tex.Sample(depthmap_samp_s, v0.xy).x;
  r0.xy = v2.xy * uparam.xy + float2(-1,-1);
  r1.x = zparam.x * zparam.y;
  r1.y = zparam.y + -zparam.x;
  r1.y = -r1.y * r0.w + zparam.y;
  r1.xz = r1.xx / r1.yy;
  r0.z = r1.z * r0.y;
  r1.y = -1;
  r0.xyz = r1.xyz * r0.xzw;
  
  r10.z=r0.z;
  r10.w=r0.w;
  r0.x-=stereo.x*(r0.z-stereo.y);
  
  r2.xyzw = ipmat._m01_m11_m21_m31 * r0.yyyy;
  r2.xyzw = ipmat._m00_m10_m20_m30 * r0.xxxx + r2.xyzw;
  r0.xyzw = ipmat._m02_m12_m22_m32 * r0.zzzz + r2.xyzw;
  r0.xyzw = ipmat._m03_m13_m23_m33 * r1.zzzz + r0.xyzw;
  r1.x = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = r1.xxx * r0.xyz;
  r1.w = cmp(64 < r0.z);
  r2.xyz = float3(64,64,64) * r1.xyz;
  r0.xyz = r1.www ? r2.xyz : r0.xyz;
  r0.xyz = -r1.xyz * float3(0.100000001,0.100000001,0.100000001) + r0.xyz;
  r2.xyz = r0.xyz;
  r1.w = 0;
  r2.w = 0;
  r3.x = 0;
  
  //float fov = ipmat._m00*ipmat._m00+ipmat._m10*ipmat._m10+ipmat._m20*ipmat._m20;
  
  while (true) {
    r3.y = cmp((int)r3.x >= 80);
    if (r3.y != 0) break;
    r3.y = cmp(0 < r2.z);
    r3.z = 0.0299999993 * r2.z;
    r3.z = max(0.5, r3.z);
    r4.xyz = -r1.xyz * r3.zzz + r2.xyz;
	
	r4.x+=stereo.x*stereo.y*0.5/r10.z;
	//r4.x+=stereo.x*stereo.y*ipmat._m00/100;
	//r4.y+=stereo.x*stereo.y*ipmat._m10/100;
	//r4.z+=stereo.x*stereo.y*ipmat._m20/100;
	
    r5.xyzw = ivshadowmat._m01_m11_m21_m31 * r4.yyyy;
    r5.xyzw = ivshadowmat._m00_m10_m20_m30 * r4.xxxx + r5.xyzw;
    r5.xyzw = ivshadowmat._m02_m12_m22_m32 * r4.zzzz + r5.xyzw;
    r5.xyzw = ivshadowmat._m03_m13_m23_m33 * r0.wwww + r5.xyzw;
	//r5.x+=stereo.x*stereo.y*r0.w*0.5;
    r5.xyz = r5.xyz / r5.www;
    r3.w = shadowmap_tex.Sample(shadowmap_samp_s, r5.xy).x;
    if (r3.y != 0) {
      r3.y = min(8, r4.z);
      r3.y = r3.y * r3.z;
      r2.w = 1 + r2.w;
      r3.z = cmp(r3.w >= 1);
      r3.w = cmp(r5.z < r3.w);
      r3.z = (int)r3.w | (int)r3.z;
      r3.y = r3.y * 0.125 + r1.w;
      r1.w = r3.z ? r3.y : r1.w;
      r2.xyz = r4.xyz;
    }
    r3.x = (int)r3.x + 1;
  }
  r0.x = 0.0125000002 * r1.w;
  r0.x = log2(r0.x);
  r0.x = uparam.z * r0.x;
  r0.x = exp2(r0.x);
  r0.y = 0.0283616241 * r2.w;
  r0.y = sin(r0.y);
  r0.x = r0.x * r0.y;
  r0.xyz = v1.xyz * r0.xxx;
  o0.xyz = saturate(uparam.www * r0.xyz);
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v0.6.198 on Thu Sep  5 00:38:32 2024
//
//
// Buffer Definitions:
//
// cbuffer CB0
// {
//
//   float4x4 ipmat;                    // Offset:    0 Size:    64
//
// }
//
// cbuffer CB1
// {
//
//   float4x4 ivshadowmat;              // Offset:    0 Size:    64
//
// }
//
// cbuffer CB2
// {
//
//   float4 uparam;                     // Offset:    0 Size:    16
//
// }
//
// cbuffer CB3
// {
//
//   float2 zparam;                     // Offset:    0 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// depthmap_samp                     sampler      NA          NA    0        1
// shadowmap_samp                    sampler      NA          NA    1        1
// depthmap_tex                      texture  float4          2d    0        1
// shadowmap_tex                     texture  float4          2d    1        1
// CB0                               cbuffer      NA          NA    0        1
// CB1                               cbuffer      NA          NA    1        1
// CB2                               cbuffer      NA          NA    2        1
// CB3                               cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy
// COLOR                    0   xyzw        1     NONE   float   xyz
// SV_Position              0   xyzw        2      POS   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_constantbuffer CB1[4], immediateIndexed
dcl_constantbuffer CB2[1], immediateIndexed
dcl_constantbuffer CB3[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v0.xy
dcl_input_ps linear v1.xyz
dcl_input_ps_siv linear noperspective v2.xy, position
dcl_output o0.xyzw
dcl_temps 6
sample_indexable(texture2d)(float,float,float,float) r0.w, v0.xyxx, t0.yzwx, s0
mad r0.xy, v2.xyxx, cb2[0].xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r1.x, cb3[0].y, cb3[0].x
add r1.y, -cb3[0].x, cb3[0].y
mad r1.y, -r1.y, r0.w, cb3[0].y
div r1.xz, r1.xxxx, r1.yyyy
mul r0.z, r0.y, r1.z
mov r1.y, l(-1.000000)
mul r0.xyz, r0.xzwx, r1.xyzx
mul r2.xyzw, r0.yyyy, cb0[1].xyzw
mad r2.xyzw, cb0[0].xyzw, r0.xxxx, r2.xyzw
mad r0.xyzw, cb0[2].xyzw, r0.zzzz, r2.xyzw
mad r0.xyzw, cb0[3].xyzw, r1.zzzz, r0.xyzw
dp3 r1.x, r0.xyzx, r0.xyzx
rsq r1.x, r1.x
mul r1.xyz, r0.xyzx, r1.xxxx
lt r1.w, l(64.000000), r0.z
mul r2.xyz, r1.xyzx, l(64.000000, 64.000000, 64.000000, 0.000000)
movc r0.xyz, r1.wwww, r2.xyzx, r0.xyzx
mad r0.xyz, -r1.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000), r0.xyzx
mov r2.xyz, r0.xyzx
mov r1.w, l(0)
mov r2.w, l(0)
mov r3.x, l(0)
loop
  ige r3.y, r3.x, l(80)
  breakc_nz r3.y
  lt r3.y, l(0.000000), r2.z
  mul r3.z, r2.z, l(0.030000)
  max r3.z, r3.z, l(0.500000)
  mad r4.xyz, -r1.xyzx, r3.zzzz, r2.xyzx
  mul r5.xyzw, r4.yyyy, cb1[1].xyzw
  mad r5.xyzw, cb1[0].xyzw, r4.xxxx, r5.xyzw
  mad r5.xyzw, cb1[2].xyzw, r4.zzzz, r5.xyzw
  mad r5.xyzw, cb1[3].xyzw, r0.wwww, r5.xyzw
  div r5.xyz, r5.xyzx, r5.wwww
  sample_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t1.yzwx, s1
  if_nz r3.y
    min r3.y, r4.z, l(8.000000)
    mul r3.y, r3.z, r3.y
    add r2.w, r2.w, l(1.000000)
    ge r3.z, r3.w, l(1.000000)
    lt r3.w, r5.z, r3.w
    or r3.z, r3.w, r3.z
    mad r3.y, r3.y, l(0.125000), r1.w
    movc r1.w, r3.z, r3.y, r1.w
    mov r2.xyz, r4.xyzx
  endif
  iadd r3.x, r3.x, l(1)
endloop
mul r0.x, r1.w, l(0.012500)
log r0.x, r0.x
mul r0.x, r0.x, cb2[0].z
exp r0.x, r0.x
mul r0.y, r2.w, l(0.0283616241)
sincos r0.y, null, r0.y
mul r0.x, r0.y, r0.x
mul r0.xyz, r0.xxxx, v1.xyzx
mul_sat o0.xyz, r0.xyzx, cb2[0].wwww
mov o0.w, l(1.000000)
ret
// Approximately 61 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
