//Skybox VS 2. Needs lower convergence scaling.
// ---- Created with 3Dmigoto v0.6.163 on Sat May 18 13:15:21 2024

cbuffer _Globals : register(b0)
{
  float4 vEye : packoffset(c0);
  row_major float4x4 mW2P : packoffset(c1);
  float4 fog : packoffset(c5);
  float4 vPosOf : packoffset(c6);
  float4 vTexOf[2] : packoffset(c7);
  float4 vRange : packoffset(c9);
  float4 cDif : packoffset(c10);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float2 v0 : POSITION0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float2 o5 : TEXCOORD4)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  
  r0.xz = v0.xy * vPosOf.xy + vPosOf.zw;
  r1.xy = -vEye.xz + r0.xz;
  r0.w = dot(r1.xy, r1.xy);
  r0.y = r0.w * vRange.z + vRange.w;
  r1.xyzw = mW2P._m10_m11_m12_m13 * r0.yyyy;
  r1.xyzw = r0.xxxx * mW2P._m00_m01_m02_m03 + r1.xyzw;
  r1.xyzw = r0.zzzz * mW2P._m20_m21_m22_m23 + r1.xyzw;
  o1.xyz = r0.xyz;
  o5.y = r0.y / vRange.w;
  r0.xyzw = mW2P._m30_m31_m32_m33 + r1.xyzw;
  o0.xyzw = r0.xyzw;
  
  o0.x+=stereo.x*stereo.y*0.9;
  
  o1.w = 1;
  o2.xyzw = r0.xyzw;
  o5.x = r0.w * fog.x + fog.y;
  o3.xyzw = v0.xyxy * vTexOf[0].xyzw + vTexOf[1].xyzw;
  r0.xy = v0.xy * float2(2,2) + float2(-1,-1);
  r0.x = dot(r0.xy, r0.xy);
  r0.x = min(1, r0.x);
  r0.x = 1 + -r0.x;
  r0.x = 1.5 * r0.x;
  r0.x = min(1, r0.x);
  o4.w = vRange.y * r0.x;
  o4.xyz = cDif.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v0.6.163 on Sat May 18 13:15:21 2024
//
//
// Buffer Definitions:
//
// cbuffer $Globals
// {
//
//   float4 vEye;                       // Offset:    0 Size:    16
//   row_major float4x4 mW2P;           // Offset:   16 Size:    64
//   float4 fog;                        // Offset:   80 Size:    16
//   float4 vPosOf;                     // Offset:   96 Size:    16
//   float4 vTexOf[2];                  // Offset:  112 Size:    32
//   float4 vRange;                     // Offset:  144 Size:    16
//   float4 cDif;                       // Offset:  160 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xy          0     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xy          5     NONE   float   xy
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[11], immediateIndexed
dcl_input v0.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xy
dcl_temps 2
mad r0.xz, v0.xxyx, cb0[6].xxyx, cb0[6].zzwz
add r1.xy, r0.xzxx, -cb0[0].xzxx
dp2 r0.w, r1.xyxx, r1.xyxx
mad r0.y, r0.w, cb0[9].z, cb0[9].w
mul r1.xyzw, r0.yyyy, cb0[2].xyzw
mad r1.xyzw, r0.xxxx, cb0[1].xyzw, r1.xyzw
mad r1.xyzw, r0.zzzz, cb0[3].xyzw, r1.xyzw
mov o1.xyz, r0.xyzx
div o5.y, r0.y, cb0[9].w
add r0.xyzw, r1.xyzw, cb0[4].xyzw
mov o0.xyzw, r0.xyzw
mov o1.w, l(1.000000)
mov o2.xyzw, r0.xyzw
mad o5.x, r0.w, cb0[5].x, cb0[5].y
mad o3.xyzw, v0.xyxy, cb0[7].xyzw, cb0[8].xyzw
mad r0.xy, v0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.x, r0.xyxx, r0.xyxx
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
mul r0.x, r0.x, l(1.500000)
min r0.x, r0.x, l(1.000000)
mul o4.w, r0.x, cb0[9].y
mov o4.xyz, cb0[10].xyzx
ret
// Approximately 24 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
