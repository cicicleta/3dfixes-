//OPPW4 ambient occlusion.
// ---- Created with 3Dmigoto v0.6.181 on Sun Jul 30 11:42:29 2023

cbuffer _Globals : register(b0)
{
  float4 vResolutionParam : packoffset(c0);
  float4 vDepthParam : packoffset(c1);
  float4 vViewParam : packoffset(c2);
  float4 vRadiusParam : packoffset(c3);
  float4 vRadiusParam2 : packoffset(c4);
  float4 vRayParam : packoffset(c5);
  float4 vOccParam : packoffset(c6);
  uint nSwitchRef : packoffset(c7);
}

SamplerState __smpsDepth_s : register(s0);
SamplerState __smpsNormal_s : register(s1);
SamplerState __smpsNoise_s : register(s2);
Texture2D<float4> sDepth : register(t0);
Texture2D<float4> sNormal : register(t1);
Texture2D<float4> sNoise : register(t2);
Texture2D<uint4> sPrmSwi : register(t4);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  
  sPrmSwi.GetDimensions(0, fDest.x, fDest.y, fDest.z);
  r0.xy = fDest.xy;
  r0.xy = v1.xy * r0.xy;
  r0.xy = (int2)r0.xy;
  r0.zw = float2(0,0);
  r0.x = sPrmSwi.Load(r0.xyz).y;
  r0.x = (int)r0.x & nSwitchRef;
  if (r0.x != 0) {
    r0.x = sDepth.SampleLevel(__smpsDepth_s, v1.xy, 0).x;
    r0.y = cmp(r0.x < vDepthParam.z);
    if (r0.y != 0) {
      r1.z = -r0.x;
      r0.y = saturate(r1.z * vRadiusParam2.z + vRadiusParam2.w);
      r0.z = vRadiusParam2.y + -vRadiusParam2.x;
      r0.y = r0.y * r0.z + vRadiusParam2.x;
      r0.z = vResolutionParam.x * r0.y;
      r0.z = r0.z / vViewParam.x;
      r0.z = r0.z / r0.x;
      r2.x = min(vRayParam.y, r0.z);
      r0.w = cmp(r2.x >= 1);
      if (r0.w != 0) {
        r2.zw = v1.xy * vViewParam.xy + vViewParam.zw;
        r1.xy = r2.zw * r0.xx;
		
		r1.x+=stereo.x*(r0.x-stereo.y)*vViewParam.z;
		
        r0.x = r0.y * r0.y;
        r0.y = -1 / r0.x;
        r2.zw = vOccParam.zw * v1.xy;
        r2.zw = sNoise.SampleLevel(__smpsNoise_s, r2.zw, 0).xy;
        r0.w = 1 + r2.x;
        r2.y = r0.z / r0.w;
        r0.z = vRadiusParam.w / r2.y;
        r0.w = cmp(r0.z < r2.x);
        r0.z = r0.z + r2.w;
        r0.z = floor(r0.z);
        r3.x = max(1, r0.z);
        r3.y = vRadiusParam.w / r3.x;
        r0.zw = r0.ww ? r3.xy : r2.xy;
        r2.xy = vResolutionParam.zw * r0.ww;
        r3.xy = sNormal.SampleLevel(__smpsNormal_s, v1.xy, 0).xy;
        r3.xy = r3.xy * float2(2,2) + float2(-1,-1);
        r4.xyz = float3(1,1,1) + -abs(r3.xyx);
        r5.z = r4.x + -abs(r3.y);
        r0.w = cmp(r5.z >= 0);
        r3.zw = cmp(r3.xy >= float2(0,0));
        r3.zw = r3.zw ? float2(1,1) : float2(-1,-1);
        r3.zw = r4.yz * r3.zw;
        r5.xy = r0.ww ? r3.xy : r3.zw;
        r0.w = dot(r5.xyz, r5.xyz);
        r0.w = rsqrt(r0.w);
        r3.xyz = r5.xyz * r0.www;
        r0.w = dot(r3.xyz, r1.xyz);
        r4.x = -vResolutionParam.z;
        r4.yw = float2(0,0);
        r4.xy = v1.xy + r4.xy;
        r1.w = sDepth.SampleLevel(__smpsDepth_s, r4.xy, 0).x;
        r4.xy = r4.xy * vViewParam.xy + vViewParam.zw;
        r5.xy = r4.xy * r1.ww;
		
		r5.x+=stereo.x*(r1.w-stereo.y)*vViewParam.z;
		
        r5.z = -r1.w;
        r1.w = dot(r3.xyz, r5.xyz);
        r3.w = cmp(r1.w < 0);
        r1.w = r0.w / r1.w;
        r6.xyz = r5.xyz * r1.www;
        r5.xyz = r3.www ? r6.xyz : r5.xyz;
        r4.z = vResolutionParam.z;
        r4.xy = v1.xy + r4.zw;
        r1.w = sDepth.SampleLevel(__smpsDepth_s, r4.xy, 0).x;
        r4.xy = r4.xy * vViewParam.xy + vViewParam.zw;
        r4.xy = r4.xy * r1.ww;
		
		r4.x+=stereo.x*(r1.w-stereo.y)*vViewParam.z;
		
        r4.z = -r1.w;
        r1.w = dot(r3.xyz, r4.xyz);
        r3.w = cmp(r1.w < 0);
        r1.w = r0.w / r1.w;
        r6.xyz = r4.xyz * r1.www;
        r4.xyz = r3.www ? r6.xyz : r4.xyz;
        r6.xz = float2(0,0);
        r6.y = -vResolutionParam.w;
        r6.xy = v1.xy + r6.xy;
        r1.w = sDepth.SampleLevel(__smpsDepth_s, r6.xy, 0).x;
        r6.xy = r6.xy * vViewParam.xy + vViewParam.zw;
        r7.xy = r6.xy * r1.ww;
		
		r7.x+=stereo.x*(r1.w-stereo.y)*vViewParam.z;
		
        r7.z = -r1.w;
        r1.w = dot(r3.xyz, r7.xyz);
        r3.w = cmp(r1.w < 0);
        r1.w = r0.w / r1.w;
        r8.xyz = r7.xyz * r1.www;
        r7.xyz = r3.www ? r8.xyz : r7.xyz;
        r6.w = vResolutionParam.w;
        r6.xy = v1.xy + r6.zw;
        r1.w = sDepth.SampleLevel(__smpsDepth_s, r6.xy, 0).x;
        r6.xy = r6.xy * vViewParam.xy + vViewParam.zw;
        r6.xy = r6.xy * r1.ww;
		
		r6.x+=stereo.x*(r1.w-stereo.y)*vViewParam.z;
		
        r6.z = -r1.w;
        r1.w = dot(r3.xyz, r6.xyz);
        r3.x = cmp(r1.w < 0);
        r0.w = r0.w / r1.w;
        r3.yzw = r6.xyz * r0.www;
        r3.xyz = r3.xxx ? r3.yzw : r6.xyz;
        r4.xyz = r4.xyz + -r1.xyz;
        r5.xyz = -r5.xyz + r1.xyz;
        r0.w = dot(r4.xyz, r4.xyz);
        r1.w = dot(r5.xyz, r5.xyz);
        r0.w = cmp(r0.w < r1.w);
        r4.xyz = r0.www ? r4.xyz : r5.xyz;
        r3.xyz = r3.xyz + -r1.xyz;
        r5.xyz = -r7.xyz + r1.xyz;
        r0.w = dot(r3.xyz, r3.xyz);
        r1.w = dot(r5.xyz, r5.xyz);
        r0.w = cmp(r0.w < r1.w);
        r3.xyz = r0.www ? r3.xyz : r5.xyz;
        r0.w = vResolutionParam.y * vResolutionParam.z;
        r3.xyz = r3.xyz * r0.www;
        r0.w = 6.28318501 * vRayParam.z;
        r1.w = r0.w * r2.z;
        r5.xyz = float3(0,0,0);
        while (true) {
          r2.z = cmp(r5.z >= vRayParam.x);
          if (r2.z != 0) break;
          r2.z = r0.w * r5.z + r1.w;
          sincos(r2.z, r6.x, r7.x);
          r7.y = r6.x;
          r6.xy = r7.xy * r2.xy;
          r6.zw = -r6.xy * r2.ww + v1.xy;
          r8.xyz = r6.yyy * r3.xyz;
          r8.xyz = r6.xxx * r4.xyz + r8.xyz;
          r2.z = dot(r8.xy, r8.xy);
          r2.z = sqrt(r2.z);
          r2.z = r8.z / r2.z;
          r2.z = vRayParam.w + r2.z;
          r3.w = r2.z * r2.z + 1;
          r3.w = rsqrt(r3.w);
          r3.w = r3.w * r2.z;
          r6.xy = r6.zw;
          r8.x = r2.z;
          r8.y = r3.w;
          r8.z = 0;
          r4.w = 0;
          r5.w = 0;
          while (true) {
            r7.z = cmp(r5.w >= r0.z);
            if (r7.z != 0) break;
            r6.xy = r7.xy * r2.xy + r6.xy;
            r7.z = sDepth.SampleLevel(__smpsDepth_s, r6.xy, 0).x;
            r9.xy = r6.xy * vViewParam.xy + vViewParam.zw;
            r9.xy = r9.xy * r7.zz;
			
			r9.x+=stereo.x*(r7.z-stereo.y)*vViewParam.z;
			
            r9.z = -r7.z;
            r9.xyz = r9.xyz + -r1.xyz;
            r7.z = dot(r9.xyz, r9.xyz);
            r7.w = dot(r9.xy, r9.xy);
            r7.w = sqrt(r7.w);
            r9.x = r9.z / r7.w;
            r7.w = cmp(r7.z < r0.x);
            r8.w = cmp(r8.x >= r9.x);
            r8.w = (int)r7.w | (int)r8.w;
            r9.w = 1 + r4.w;
            r4.w = r8.w ? r9.w : r4.w;
            r8.w = cmp(r8.x < r9.x);
            r7.w = r7.w ? r8.w : 0;
            r8.w = r9.x * r9.x + 1;
            r8.w = rsqrt(r8.w);
            r9.y = r9.x * r8.w;
            r8.w = r9.x * r8.w + -r8.y;
            r7.z = r7.z * r0.y + 1;
            r9.z = r8.w * r7.z + r8.z;
            r8.xyz = r7.www ? r9.xyz : r8.xyz;
            r5.w = 1 + r5.w;
          }
          r4.w = saturate(r4.w);
          r5.y = r5.y + r4.w;
          r8.z = saturate(r8.z);
          r5.x = r8.z + r5.x;
          r5.z = 1 + r5.z;
        }
        r0.x = cmp(r5.y != 0.000000);
        r0.y = r5.x / r5.y;
        r0.y = vOccParam.x * r0.y;
        r0.y = min(vOccParam.y, r0.y);
        r0.x = r0.x ? r0.y : 0;
        r0.x = saturate(1 + -r0.x);
      } else {
        r0.x = 1;
      }
    } else {
      r0.x = 1;
    }
  } else {
    r0.x = 1;
  }
  o0.xyzw = r0.xxxx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v0.6.181 on Sun Jul 30 11:42:29 2023
//
//
// Buffer Definitions:
//
// cbuffer $Globals
// {
//
//   float4 vResolutionParam;           // Offset:    0 Size:    16
//   float4 vDepthParam;                // Offset:   16 Size:    16
//   float4 vViewParam;                 // Offset:   32 Size:    16
//   float4 vRadiusParam;               // Offset:   48 Size:    16
//   float4 vRadiusParam2;              // Offset:   64 Size:    16
//   float4 vRayParam;                  // Offset:   80 Size:    16
//   float4 vOccParam;                  // Offset:   96 Size:    16
//   uint nSwitchRef;                   // Offset:  112 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// __smpsDepth                       sampler      NA          NA    0        1
// __smpsNormal                      sampler      NA          NA    1        1
// __smpsNoise                       sampler      NA          NA    2        1
// sDepth                            texture  float4          2d    0        1
// sNormal                           texture  float4          2d    1        1
// sNoise                            texture  float4          2d    2        1
// sPrmSwi                           texture   uint4          2d    4        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (uint,uint,uint,uint) t4
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 10
resinfo_indexable(texture2d)(uint,uint,uint,uint) r0.xy, l(0), t4.xyzw
mul r0.xy, r0.xyxx, v1.xyxx
ftoi r0.xy, r0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(uint,uint,uint,uint) r0.x, r0.xyzw, t4.yxzw
and r0.x, r0.x, cb0[7].x
if_nz r0.x
  sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0, l(0.000000)
  lt r0.y, r0.x, cb0[1].z
  if_nz r0.y
    mov r1.z, -r0.x
    mad_sat r0.y, r1.z, cb0[4].z, cb0[4].w
    add r0.z, -cb0[4].x, cb0[4].y
    mad r0.y, r0.y, r0.z, cb0[4].x
    mul r0.z, r0.y, cb0[0].x
    div r0.z, r0.z, cb0[2].x
    div r0.z, r0.z, r0.x
    min r2.x, r0.z, cb0[5].y
    ge r0.w, r2.x, l(1.000000)
    if_nz r0.w
      mad r2.zw, v1.xxxy, cb0[2].xxxy, cb0[2].zzzw
      mul r1.xy, r0.xxxx, r2.zwzz
      mul r0.x, r0.y, r0.y
      div r0.y, l(-1.000000), r0.x
      mul r2.zw, v1.xxxy, cb0[6].zzzw
      sample_l_indexable(texture2d)(float,float,float,float) r2.zw, r2.zwzz, t2.zwxy, s2, l(0.000000)
      add r0.w, r2.x, l(1.000000)
      div r2.y, r0.z, r0.w
      div r0.z, cb0[3].w, r2.y
      lt r0.w, r0.z, r2.x
      add r0.z, r2.w, r0.z
      round_ni r0.z, r0.z
      max r3.x, r0.z, l(1.000000)
      div r3.y, cb0[3].w, r3.x
      movc r0.zw, r0.wwww, r3.xxxy, r2.xxxy
      mul r2.xy, r0.wwww, cb0[0].zwzz
      sample_l_indexable(texture2d)(float,float,float,float) r3.xy, v1.xyxx, t1.xyzw, s1, l(0.000000)
      mad r3.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
      add r4.xyz, -|r3.xyxx|, l(1.000000, 1.000000, 1.000000, 0.000000)
      add r5.z, -|r3.y|, r4.x
      ge r0.w, r5.z, l(0.000000)
      ge r3.zw, r3.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
      movc r3.zw, r3.zzzw, l(0,0,1.000000,1.000000), l(0,0,-1.000000,-1.000000)
      mul r3.zw, r3.zzzw, r4.yyyz
      movc r5.xy, r0.wwww, r3.xyxx, r3.zwzz
      dp3 r0.w, r5.xyzx, r5.xyzx
      rsq r0.w, r0.w
      mul r3.xyz, r0.wwww, r5.xyzx
      dp3 r0.w, r3.xyzx, r1.xyzx
      mov r4.x, -cb0[0].z
      mov r4.yw, l(0,0,0,0)
      add r4.xy, r4.xyxx, v1.xyxx
      sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t0.yzwx, s0, l(0.000000)
      mad r4.xy, r4.xyxx, cb0[2].xyxx, cb0[2].zwzz
      mul r5.xy, r1.wwww, r4.xyxx
      mov r5.z, -r1.w
      dp3 r1.w, r3.xyzx, r5.xyzx
      lt r3.w, r1.w, l(0.000000)
      div r1.w, r0.w, r1.w
      mul r6.xyz, r1.wwww, r5.xyzx
      movc r5.xyz, r3.wwww, r6.xyzx, r5.xyzx
      mov r4.z, cb0[0].z
      add r4.xy, r4.zwzz, v1.xyxx
      sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t0.yzwx, s0, l(0.000000)
      mad r4.xy, r4.xyxx, cb0[2].xyxx, cb0[2].zwzz
      mul r4.xy, r1.wwww, r4.xyxx
      mov r4.z, -r1.w
      dp3 r1.w, r3.xyzx, r4.xyzx
      lt r3.w, r1.w, l(0.000000)
      div r1.w, r0.w, r1.w
      mul r6.xyz, r1.wwww, r4.xyzx
      movc r4.xyz, r3.wwww, r6.xyzx, r4.xyzx
      mov r6.xz, l(0,0,0,0)
      mov r6.y, -cb0[0].w
      add r6.xy, r6.xyxx, v1.xyxx
      sample_l_indexable(texture2d)(float,float,float,float) r1.w, r6.xyxx, t0.yzwx, s0, l(0.000000)
      mad r6.xy, r6.xyxx, cb0[2].xyxx, cb0[2].zwzz
      mul r7.xy, r1.wwww, r6.xyxx
      mov r7.z, -r1.w
      dp3 r1.w, r3.xyzx, r7.xyzx
      lt r3.w, r1.w, l(0.000000)
      div r1.w, r0.w, r1.w
      mul r8.xyz, r1.wwww, r7.xyzx
      movc r7.xyz, r3.wwww, r8.xyzx, r7.xyzx
      mov r6.w, cb0[0].w
      add r6.xy, r6.zwzz, v1.xyxx
      sample_l_indexable(texture2d)(float,float,float,float) r1.w, r6.xyxx, t0.yzwx, s0, l(0.000000)
      mad r6.xy, r6.xyxx, cb0[2].xyxx, cb0[2].zwzz
      mul r6.xy, r1.wwww, r6.xyxx
      mov r6.z, -r1.w
      dp3 r1.w, r3.xyzx, r6.xyzx
      lt r3.x, r1.w, l(0.000000)
      div r0.w, r0.w, r1.w
      mul r3.yzw, r0.wwww, r6.xxyz
      movc r3.xyz, r3.xxxx, r3.yzwy, r6.xyzx
      add r4.xyz, -r1.xyzx, r4.xyzx
      add r5.xyz, r1.xyzx, -r5.xyzx
      dp3 r0.w, r4.xyzx, r4.xyzx
      dp3 r1.w, r5.xyzx, r5.xyzx
      lt r0.w, r0.w, r1.w
      movc r4.xyz, r0.wwww, r4.xyzx, r5.xyzx
      add r3.xyz, -r1.xyzx, r3.xyzx
      add r5.xyz, r1.xyzx, -r7.xyzx
      dp3 r0.w, r3.xyzx, r3.xyzx
      dp3 r1.w, r5.xyzx, r5.xyzx
      lt r0.w, r0.w, r1.w
      movc r3.xyz, r0.wwww, r3.xyzx, r5.xyzx
      mul r0.w, cb0[0].z, cb0[0].y
      mul r3.xyz, r0.wwww, r3.xyzx
      mul r0.w, cb0[5].z, l(6.283185)
      mul r1.w, r2.z, r0.w
      mov r5.xyz, l(0,0,0,0)
      loop
        ge r2.z, r5.z, cb0[5].x
        breakc_nz r2.z
        mad r2.z, r0.w, r5.z, r1.w
        sincos r6.x, r7.x, r2.z
        mov r7.y, r6.x
        mul r6.xy, r2.xyxx, r7.xyxx
        mad r6.zw, -r6.xxxy, r2.wwww, v1.xxxy
        mul r8.xyz, r3.xyzx, r6.yyyy
        mad r8.xyz, r6.xxxx, r4.xyzx, r8.xyzx
        dp2 r2.z, r8.xyxx, r8.xyxx
        sqrt r2.z, r2.z
        div r2.z, r8.z, r2.z
        add r2.z, r2.z, cb0[5].w
        mad r3.w, r2.z, r2.z, l(1.000000)
        rsq r3.w, r3.w
        mul r3.w, r2.z, r3.w
        mov r6.xy, r6.zwzz
        mov r8.x, r2.z
        mov r8.y, r3.w
        mov r8.z, l(0)
        mov r4.w, l(0)
        mov r5.w, l(0)
        loop
          ge r7.z, r5.w, r0.z
          breakc_nz r7.z
          mad r6.xy, r7.xyxx, r2.xyxx, r6.xyxx
          sample_l_indexable(texture2d)(float,float,float,float) r7.z, r6.xyxx, t0.yzxw, s0, l(0.000000)
          mad r9.xy, r6.xyxx, cb0[2].xyxx, cb0[2].zwzz
          mul r9.xy, r7.zzzz, r9.xyxx
          mov r9.z, -r7.z
          add r9.xyz, -r1.xyzx, r9.xyzx
          dp3 r7.z, r9.xyzx, r9.xyzx
          dp2 r7.w, r9.xyxx, r9.xyxx
          sqrt r7.w, r7.w
          div r9.x, r9.z, r7.w
          lt r7.w, r7.z, r0.x
          ge r8.w, r8.x, r9.x
          or r8.w, r7.w, r8.w
          add r9.w, r4.w, l(1.000000)
          movc r4.w, r8.w, r9.w, r4.w
          lt r8.w, r8.x, r9.x
          and r7.w, r7.w, r8.w
          mad r8.w, r9.x, r9.x, l(1.000000)
          rsq r8.w, r8.w
          mul r9.y, r8.w, r9.x
          mad r8.w, r9.x, r8.w, -r8.y
          mad r7.z, r7.z, r0.y, l(1.000000)
          mad r9.z, r8.w, r7.z, r8.z
          movc r8.xyz, r7.wwww, r9.xyzx, r8.xyzx
          add r5.w, r5.w, l(1.000000)
        endloop
        mov_sat r4.w, r4.w
        add r5.y, r4.w, r5.y
        mov_sat r8.z, r8.z
        add r5.x, r5.x, r8.z
        add r5.z, r5.z, l(1.000000)
      endloop
      ne r0.x, r5.y, l(0.000000)
      div r0.y, r5.x, r5.y
      mul r0.y, r0.y, cb0[6].x
      min r0.y, r0.y, cb0[6].y
      and r0.x, r0.y, r0.x
      add_sat r0.x, -r0.x, l(1.000000)
    else
      mov r0.x, l(1.000000)
    endif
  else
    mov r0.x, l(1.000000)
  endif
else
  mov r0.x, l(1.000000)
endif
mov o0.xyzw, r0.xxxx
ret
// Approximately 187 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
