//Distant fog PS 1.
// ---- Created with 3Dmigoto v0.6.163 on Thu Jun 20 19:45:53 2024
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

TextureCube<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[20];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD2,
  float3 v3 : TEXCOORD3,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  
  r0.x = dot(v3.xyz, v3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v3.zxy * r0.xxx;
  r0.w = cb1[4].y + cb0[19].y;
  r1.z = -r0.w;
  r1.w = r1.z * r0.z;
  r1.w = r1.w * r1.w;
  r0.w = r0.w * r0.w + -r1.w;
  r0.w = cb0[19].x * cb0[19].x + -r0.w;
  r0.w = sqrt(r0.w);
  r0.w = r0.z * r1.z + r0.w;
  r1.xy = float2(0,0);
  r0.xyz = r0.www * r0.xyz + -r1.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = max(abs(r0.x), abs(r0.y));
  r0.w = 1 / r0.w;
  r1.x = min(abs(r0.x), abs(r0.y));
  r0.w = r1.x * r0.w;
  r1.x = r0.w * r0.w;
  r1.y = r1.x * 0.0208350997 + -0.0851330012;
  r1.y = r1.x * r1.y + 0.180141002;
  r1.y = r1.x * r1.y + -0.330299497;
  r1.x = r1.x * r1.y + 0.999866009;
  r1.y = r1.x * r0.w;
  r1.y = r1.y * -2 + 1.57079637;
  r1.z = cmp(abs(r0.y) < abs(r0.x));
  r1.y = r1.z ? r1.y : 0;
  r0.w = r0.w * r1.x + r1.y;
  r1.xy = cmp(r0.yz < -r0.yz);
  r1.x = r1.x ? -3.141593 : 0;
  r0.w = r1.x + r0.w;
  r1.x = min(r0.x, r0.y);
  r1.x = cmp(r1.x < -r1.x);
  r1.z = max(r0.x, r0.y);
  r1.z = cmp(r1.z >= -r1.z);
  r1.x = r1.z ? r1.x : 0;
  r0.w = r1.x ? -r0.w : r0.w;
  r0.w = r0.w + r0.w;
  sincos(r0.w, r1.x, r2.x);
  r3.z = r1.x;
  r3.y = r2.x;
  r3.x = -r1.x;
  r2.y = dot(r3.xy, r0.xy);
  r2.z = dot(r3.yz, r0.xy);
  r2.x = -r2.z;
  r0.x = dot(r2.xy, r2.xy);
  r0.x = rsqrt(r0.x);
  r0.xy = r2.yx * r0.xx;
  r0.w = abs(r0.z) * -0.0187292993 + 0.0742610022;
  r0.w = r0.w * abs(r0.z) + -0.212114394;
  r0.w = r0.w * abs(r0.z) + 1.57072878;
  r1.x = 1 + -abs(r0.z);
  r2.w = r0.z;
  r0.z = sqrt(r1.x);
  r1.x = r0.w * r0.z;
  r1.x = r1.x * -2 + 3.14159274;
  r1.x = r1.y ? r1.x : 0;
  r0.z = r0.w * r0.z + r1.x;
  r0.z = 1.57079637 + -r0.z;
  r0.w = 0.636619747 * r0.z;
  r1.x = cb0[19].z + cb0[19].w;
  r0.w = -r1.x * 0.0111111114 + r0.w;
  r1.x = cb0[19].z + -cb0[19].w;
  r1.x = 0.0111111114 * r1.x;
  r0.w = r0.w / r1.x;
  r0.w = max(-1, r0.w);
  r0.w = min(1, r0.w);
  r0.z = -r0.z * 0.636619747 + r0.w;
  r0.z = -1.57079637 * r0.z;
  sincos(r0.z, r1.x, r2.x);
  r1.xy = r1.xx * r0.xy;
  r0.xyz = r0.yxx * r0.yyx;
  r1.z = -r1.x;
  r1.w = r2.x;
  r3.y = dot(r1.zyw, r2.yzw);
  r0.w = 1 + -r2.x;
  r4.xy = r0.xz * r0.ww + r2.xx;
  r4.w = r0.y * r0.w;
  r0.zw = r4.wy;
  r0.y = -r1.y;
  r4.z = r1.x;
  r3.x = dot(r4.xwz, r2.yzw);
  r3.z = dot(r0.zwy, r2.yzw);
  r0.xyzw = t0.Sample(s2_s, r3.xyz).xyzw;
  r0.xyz = cb0[2].xyz * r0.xyz;
  r1.xyzw = t2.Sample(s0_s, v1.xy).xyzw;
  r0.xyzw = -r1.xyzw + r0.xyzw;
  r2.xyzw = t1.Sample(s1_s, v1.xy).xyzw;
  r2.x = cb1[7].x * r2.x + cb1[7].y;
  r2.x = 1 / r2.x;
  
  //v2.x-=stereo.x*(1-stereo.y*r2.x);
  v2.x-=stereo.x;
  
  r2.xyz = v2.xyz * r2.xxx;
  r2.x = dot(r2.xyz, r2.xyz);
  r2.x = sqrt(r2.x);
  r2.y = -cb0[12].x + r2.x;
  r2.y = saturate(cb0[12].y * r2.y);
  r0.xyzw = r2.yyyy * r0.xyzw + r1.xyzw;
  r1.xyzw = cb0[15].xyzw + -r0.xyzw;
  r2.z = -cb0[16].x + r2.x;
  r2.x = -cb0[18].x + r2.x;
  r2.x = saturate(cb0[18].y * r2.x);
  r2.z = saturate(cb0[16].y * r2.z);
  r2.w = -1 + cb0[18].w;
  r2.y = r2.y * r2.w + 1;
  r2.xz = r2.xz * r2.yy;
  r2.xy = cb0[18].zz * r2.xz;
  r2.x = cb0[17].w * r2.x;
  r2.y = cb0[15].w * r2.y;
  r1.xyzw = r2.yyyy * r1.xyzw + r0.xyzw;
  r3.xyzw = cb0[17].xyzw + -r0.xyzw;
  r0.xyzw = r2.xxxx * r3.xyzw + r0.xyzw;
  r1.xyzw = r1.xyzw + -r0.xyzw;
  r2.xyzw = t3.Sample(s3_s, v1.xy).xyzw;
  o0.xyzw = r2.wwww * r1.xyzw + r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v0.6.163 on Thu Jun 20 19:45:53 2024
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyz         3     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer CB0[20], immediateIndexed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 5
dp3 r0.x, v3.xyzx, v3.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v3.zxyz
add r0.w, cb0[19].y, cb1[4].y
mov r1.z, -r0.w
mul r1.w, r0.z, r1.z
mul r1.w, r1.w, r1.w
mad r0.w, r0.w, r0.w, -r1.w
mad r0.w, cb0[19].x, cb0[19].x, -r0.w
sqrt r0.w, r0.w
mad r0.w, r0.z, r1.z, r0.w
mov r1.xy, l(0,0,0,0)
mad r0.xyz, r0.wwww, r0.xyzx, -r1.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
max r0.w, |r0.y|, |r0.x|
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
min r1.x, |r0.y|, |r0.x|
mul r0.w, r0.w, r1.x
mul r1.x, r0.w, r0.w
mad r1.y, r1.x, l(0.0208350997), l(-0.085133)
mad r1.y, r1.x, r1.y, l(0.180141)
mad r1.y, r1.x, r1.y, l(-0.330299497)
mad r1.x, r1.x, r1.y, l(0.999866)
mul r1.y, r0.w, r1.x
mad r1.y, r1.y, l(-2.000000), l(1.57079637)
lt r1.z, |r0.y|, |r0.x|
and r1.y, r1.z, r1.y
mad r0.w, r0.w, r1.x, r1.y
lt r1.xy, r0.yzyy, -r0.yzyy
and r1.x, r1.x, l(0xc0490fdb)
add r0.w, r0.w, r1.x
min r1.x, r0.y, r0.x
lt r1.x, r1.x, -r1.x
max r1.z, r0.y, r0.x
ge r1.z, r1.z, -r1.z
and r1.x, r1.z, r1.x
movc r0.w, r1.x, -r0.w, r0.w
add r0.w, r0.w, r0.w
sincos r1.x, r2.x, r0.w
mov r3.z, r1.x
mov r3.y, r2.x
mov r3.x, -r1.x
dp2 r2.y, r3.xyxx, r0.xyxx
dp2 r2.z, r3.yzyy, r0.xyxx
mov r2.x, -r2.z
dp2 r0.x, r2.xyxx, r2.xyxx
rsq r0.x, r0.x
mul r0.xy, r0.xxxx, r2.yxyy
mad r0.w, |r0.z|, l(-0.0187292993), l(0.074261)
mad r0.w, r0.w, |r0.z|, l(-0.212114394)
mad r0.w, r0.w, |r0.z|, l(1.57072878)
add r1.x, -|r0.z|, l(1.000000)
mov r2.w, r0.z
sqrt r0.z, r1.x
mul r1.x, r0.z, r0.w
mad r1.x, r1.x, l(-2.000000), l(3.14159274)
and r1.x, r1.y, r1.x
mad r0.z, r0.w, r0.z, r1.x
add r0.z, -r0.z, l(1.57079637)
mul r0.w, r0.z, l(0.636619747)
add r1.x, cb0[19].w, cb0[19].z
mad r0.w, -r1.x, l(0.0111111114), r0.w
add r1.x, -cb0[19].w, cb0[19].z
mul r1.x, r1.x, l(0.0111111114)
div r0.w, r0.w, r1.x
max r0.w, r0.w, l(-1.000000)
min r0.w, r0.w, l(1.000000)
mad r0.z, -r0.z, l(0.636619747), r0.w
mul r0.z, r0.z, l(-1.57079637)
sincos r1.x, r2.x, r0.z
mul r1.xy, r0.xyxx, r1.xxxx
mul r0.xyz, r0.yyxy, r0.yxxy
mov r1.z, -r1.x
mov r1.w, r2.x
dp3 r3.y, r1.zywz, r2.yzwy
add r0.w, -r2.x, l(1.000000)
mad r4.xy, r0.xzxx, r0.wwww, r2.xxxx
mul r4.w, r0.w, r0.y
mov r0.zw, r4.wwwy
mov r0.y, -r1.y
mov r4.z, r1.x
dp3 r3.x, r4.xwzx, r2.yzwy
dp3 r3.z, r0.zwyz, r2.yzwy
sample r0.xyzw, r3.xyzx, t0.xyzw, s2
mul r0.xyz, r0.xyzx, cb0[2].xyzx
sample r1.xyzw, v1.xyxx, t2.xyzw, s0
add r0.xyzw, r0.xyzw, -r1.xyzw
sample r2.xyzw, v1.xyxx, t1.xyzw, s1
mad r2.x, cb1[7].x, r2.x, cb1[7].y
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
mul r2.xyz, r2.xxxx, v2.xyzx
dp3 r2.x, r2.xyzx, r2.xyzx
sqrt r2.x, r2.x
add r2.y, r2.x, -cb0[12].x
mul_sat r2.y, r2.y, cb0[12].y
mad r0.xyzw, r2.yyyy, r0.xyzw, r1.xyzw
add r1.xyzw, -r0.xyzw, cb0[15].xyzw
add r2.z, r2.x, -cb0[16].x
add r2.x, r2.x, -cb0[18].x
mul_sat r2.x, r2.x, cb0[18].y
mul_sat r2.z, r2.z, cb0[16].y
add r2.w, cb0[18].w, l(-1.000000)
mad r2.y, r2.y, r2.w, l(1.000000)
mul r2.xz, r2.yyyy, r2.xxzx
mul r2.xy, r2.xzxx, cb0[18].zzzz
mul r2.x, r2.x, cb0[17].w
mul r2.y, r2.y, cb0[15].w
mad r1.xyzw, r2.yyyy, r1.xyzw, r0.xyzw
add r3.xyzw, -r0.xyzw, cb0[17].xyzw
mad r0.xyzw, r2.xxxx, r3.xyzw, r0.xyzw
add r1.xyzw, -r0.xyzw, r1.xyzw
sample r2.xyzw, v1.xyxx, t3.xyzw, s3
mad o0.xyzw, r2.wwww, r1.xyzw, r0.xyzw
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
