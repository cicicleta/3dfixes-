//main lighting shader
// ---- Created with 3Dmigoto v1.2.56 on Sun Oct 29 23:44:46 2017
cbuffer cb3 : register(b3)
{
  float4 cb3[21];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[4];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[6];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[3];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "matrix.hlsl"

void main( 
  float4 v0 : POSITION0,
  float3 v1 : NORMAL0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float fov : TEXCOORD2)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb2[1].xyzw * v0.yyyy;
  r0.xyzw = cb2[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb2[2].xyzw * v0.zzzz + r0.xyzw;
  r0.xyzw = cb2[3].xyzw + r0.xyzw;
  r1.xyzw = cb3[18].xyzw * r0.yyyy;
  r1.xyzw = cb3[17].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb3[19].xyzw * r0.zzzz + r1.xyzw;
  r1.xyzw = cb3[20].xyzw * r0.wwww + r1.xyzw;
  o0.xyzw = r1.xyzw;

float4 stereo = StereoParams.Load(0);
float4 iniParams = IniParams.Load(0);
float separation = stereo.x; float convergence = stereo.y;
matrix mp = MATRIX(cb3, 17);
matrix MV = MATRIX(cb3, 9);

bool full_screen = (r1.w == 1);
float depth = r1.w;
if (!full_screen) {
	r1.x += separation * (depth - convergence);
}

  r1.y = cb1[5].x * r1.y;
  r2.xzw = float3(0.5,0.5,0.5) * r1.xwy;
  o1.zw = r1.zw;
  o1.xy = r2.xw + r2.zz;
  r1.xyz = cb3[10].xyz * r0.yyy;
  r1.xyz = cb3[9].xyz * r0.xxx + r1.xyz;
  r0.xyz = cb3[11].xyz * r0.zzz + r1.xyz;
  r0.xyz = cb3[12].xyz * r0.www + r0.xyz;

if (!full_screen) {

float det = 1 / determinant(MV);

	float3 mi;
	mi.x = ((MV._m11 * MV._m22) - (MV._m21 * MV._m12)) * det;
	mi.y = ((MV._m21 * MV._m02) - (MV._m01 * MV._m22)) * det;
	mi.z = ((MV._m01 * MV._m12) - (MV._m11 * MV._m02)) * det;

	fov = 1 / dot(mi, mp._m00_m10_m20);
r0.x += separation * (depth - convergence) * fov;

} else {

if(iniParams.y == 65){fov = 1.13;}
if(iniParams.y == 70){fov = 1.24;}
if(iniParams.y == 75){fov = 1.36;}
if(iniParams.y == 80){fov = 1.49;}
if(iniParams.y == 85){fov = 1.625;}
if(iniParams.y == 90){fov = 1.775;}
}

  r1.xyz = float3(-1,-1,1) * r0.xyz;
  r0.xyz = -r0.xyz * float3(-1,-1,1) + v1.xyz;
  o2.xyz = cb0[2].xxx * r0.xyz + r1.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
vs_4_0
dcl_constantbuffer cb0[3], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[21], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_temps 3
mul r0.xyzw, v0.yyyy, cb2[1].xyzw
mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
add r0.xyzw, r0.xyzw, cb2[3].xyzw
mul r1.xyzw, r0.yyyy, cb3[18].xyzw
mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
mad r1.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
mov o0.xyzw, r1.xyzw
mul r1.y, r1.y, cb1[5].x
mul r2.xzw, r1.xxwy, l(0.500000, 0.000000, 0.500000, 0.500000)
mov o1.zw, r1.zzzw
add o1.xy, r2.zzzz, r2.xwxx
mul r1.xyz, r0.yyyy, cb3[10].xyzx
mad r1.xyz, cb3[9].xyzx, r0.xxxx, r1.xyzx
mad r0.xyz, cb3[11].xyzx, r0.zzzz, r1.xyzx
mad r0.xyz, cb3[12].xyzx, r0.wwww, r0.xyzx
mul r1.xyz, r0.xyzx, l(-1.000000, -1.000000, 1.000000, 0.000000)
mad r0.xyz, -r0.xyzx, l(-1.000000, -1.000000, 1.000000, 0.000000), v1.xyzx
mad o2.xyz, cb0[2].xxxx, r0.xyzx, r1.xyzx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
